[{"_index":"articles_igl","_id":"p5pzbo0B5PBXeLSBex8j","_version":1,"_score":1,"fields":{"resume":["ABSTRACT Gamification has been adopted in software development tasks in recent years. This adoption seeks, for example, to improve the en- gagement of developers while creating UML models or writing code. Empirical studies report that UML models suffer from incom- pleteness and inconsistency problems. This study conjectures that gamification mechanics can improve learner engagement while learning software modeling, mitigating such problems concern- ing UML models. The current literature lacks studies that explore gamification and UML model quality in the context of software modeling learning. This article, therefore, proposes ModelGame, which is a quality model to support software modeling learning in a gamified way. It serves as a reference framework so that instructors can obtain a parameterized way to evaluate UML models created by learners. The quality of UML models can be improved by apply- ing gamified activities and providing guidelines aware of quality issues. A qualitative questionnaire was answered by 19 instructors who teach software modeling at higher education institutions. The results show that (1) 94.7% recognize that the proposed model can improve the quality of UML models, indicating that they would adopt the ModelGame in their learning practices; and (2) 47.4% do not use any gamification mechanics in their classes. The results are encouraging, showing the potential for applying and improving the teaching and learning of software modeling."],"texte_integral":["INTRODUCTION Gamification has been adopted in software development tasks in recent years. This adoption seeks, for example, to improve the en- gagement of developers while creating UML models or writing code. Empirical studies [7, 9, 14] report that UML models suffer from incompleteness and inconsistency problems. Lange [14] rein- forces that these defects bring potential risks that can cause mis- interpretation and communication failure, representing a risk to software quality. Thus, finding formats that favor student learning and consequently in generating increasingly effective UML mod- els can become one of the main challenges faced by instructors that include UML (Unified Modeling Language) as part of software modeling content.\nSome studies [3, 12, 25] sought to understand how to apply gam- ification in software modeling teaching using some elements such as points, emblems and levels. However, instructors and researchers still find limitations when applying, evaluating, and measuring the use of this tool in the learning of software modeling students and, consequently, in the models developed by them, since in the current literature there is no “frame of reference” that guides them. This study conjectures that gamification mechanics can improve learner engagement while learning software modeling, mitigating such problems concerning UML models. The current literature lacks studies that explore gamification and model quality in the context of software modeling learning.\nThis article, therefore, introduces ModelGame, which is a quality model to support software modeling learning in a gamified way.\nIt serves as a reference framework so that instructors can obtain a parameterized way to evaluate UML models created by learners.\nThe quality of UML models can be improved by applying gami- fied activities and providing guidelines aware of quality issues. A reference framework would help to (1) establish parameters for eval- uating UML models created by learners; (2) provide guidelines to improve the quality of these artifacts; (3) to analyze which elements of gamification could be included in each of the phases of modeling using UML; (4) identify intrinsic and extrinsic aspects of students during the modeling stages, to improve the models; (5) to compare validated theories about the inclusion of gamification in software modeling teaching, taking into account the types of learning and methodologies used; and (6) contributing to the identification of gamification use objectives in modeling activities.\nA qualitative questionnaire was answered by 19 instructors who teach software modeling at higher education institutions. The re- sults show that (1) 94.7% recognize that the proposed model can improve the quality of UML models, indicating that they would adopt it in their learning practices; and (2) 47.4% do not use any 100 SBCARS ’21, September 27-October 1, 2021, Joinville, Brazil Ed Wilson Júnior and Kleinner Farias gamification mechanics in their classes. These results are encourag- ing, showing the potential for applying and improving the teaching and learning of software modeling.\nThe remainder of the paper is organized as follows. Section 2 presents the main concepts discussed throughout the article. Sec- tion 3 discusses the related work, highlighting research opportu- nities. Section 4 introduces the proposed quality model. Section 5 presents how the quality model was evaluated. Section 6 points out some threats to validity. Finally, Section 7 presents some concluding remarks and future work.\n2 BACKGROUND This section presents the essential concepts for understanding this work, including gamification and software engineering teaching (Section 2.1), and software modeling and model quality (Section 2.2).\n2.1 Gamification and Software Engineering Teaching Gamification aims to use game elements in the context of not game [5], bringing all positive aspects they provide as a way to encourage and engage “players,” thereby broadening their motivations.\nWerbach [23] classifies gamification into three dimensions: Dy- namics, Mechanics, and Components. Dynamicsinclude all game aspects related to the emotional responses of “players” (e.g., rela- tionship, progression, and narrative).Mechanics offer elements that promote the action of a game — usually elaborated via a rule-based development —, so that the player can interact with such elements, e.g., challenges, feedback, and rewards. Components represent the aesthetic elements of gamification, whose goal is to present visual aspects with which players can perform the interaction, for example, points, scores, and emblems (badges).\nKnowing that the teaching of Software Engineering should in- volve students to experience the professional practices of the area so that they can understand which practices and techniques are useful in several different situations [2]. The challenges of teaching new software engineers are not limited to learning programming, but also include paying attention to detail, considering the quality of created models, established schedule and defined budgets [1]. In addition to understanding the technical challenges, these future professionals must be up to date with nontechnical issues, including teamwork, communication and management.\nTo meet these new demands of the current context, the format with exhibition classes is no longer considered enough and may even become demotivating and ineffective in learning students. In this sense, gamification has been increasingly used in the teach- ing of software engineering as a way to promote behavioral and psychological changes [11] providing an environment that favors communication, cooperation, feedback, reward, achievement and other recurring elements that are capable of improving perfor- mance, efficiency and engagement in educational activities , and can enhance, for example, the learning of software modeling.\n2.2 Software Modeling and Model Quality Software modeling encompasses the set of principles, concepts, and practices that lead to the development of a high-quality system or product. The principles of this activity establish a philosophy that guides the entire software development process.\nIn this scenario, UML models play a crucial role in software development tasks, for example, documenting project decisions, understanding development details, promoting better communica- tion between teams, and generating greater efficiency in software development [19]. However, these models suffer problems of in- consistency and incompleteness [10, 18], as well as end up being overlooked within the modeling process, as pointed out in some empirical studies in the literature [14, 15]. Class and sequence dia- grams, for example, present inconsistencies when sequence diagram objects are not found in the class diagram, consequently developers end up living with inconsistencies throughout the development process.\nA research challenge still open is how to evaluate these diagrams, both in industry and in the teaching process, in terms of quality, such as syntactic and semantic, for example.\n3 RELATED WORK The selection of related works was carried out following two steps: (1) search in digital repositories, such as Google Scholar and Scopus (Elsevier) of articles related to gamification, quality modeling, and modeling learning; and (2) filter selected articles considering the alignment of such works with the objective of the work (Section 4).\nAfter selecting the works, they were analyzed (Section 3.1) and compared (Section 3.2), seeking to identify research opportunities.\n3.1 Analysis of Related Works Porto et al. (2021) [4]. This work performed a systematic map- ping with the objective of characterizing how gamification has been adopted in noneducational contexts of software engineering activities. The main results of this study show that gamification provided benefits for activities such as requirements specification, development, testing, project management, and support process.\nIn addition, he pointed out that the number of publications and new research initiatives has increased over the years, many posi- tive results have been achieved in software engineering activities.\nNevertheless, the study reinforced that gamification can still be explored for other tasks in this area, as empirical evidence is very limited.\nMarin (2021) [17]. It performed the application of gamification on some topics of a software engineering course to engage students and increase their motivation and argued that, with due motiva- tion, students can better exercise the topics and obtain more solid knowledge. There were five games related to risk management, BPMN modeling, Scrum process, design and inspection of class diagrams, and cosmic functional size measurement to assist in the learning process of the software engineering course. This study also presented the lessons learned about the application of gamification and serious games in software engineering, including limitations or disadvantages.\nJurgelaitis et al. (2018) [12]. This work conducted a research to investigate how gamification could be inserted into an Information Systems Modeling course, which covers a range of topics on UML.\nAs a result, an implementation of the gamified system modeling course in the Moodle environment was presented, using additional 101 ModelGame: A Quality Model for Gamified Software Modeling Learning SBCARS ’21, September 27-October 1, 2021, Joinville, Brazil plugins for the use of the necessary gamified elements. The study showed good results and obtained a positive acceptance by the participating students.\nRodrigues et al. (2018) [22]. They investigated the use of games and game elements in software engineering education, through a research that had the participation of 88 instructors of this disci- pline. The results showed that most instructors are aware of these educational approaches, however, the games were adopted by only 21 participants and game elements were adopted only by 19. Games are most often used to cover “Software Process” and “Project Man- agement”. The most commonly used game elements are points, quizzes, and challenges. The results also show that the main rea- sons for not adopting the resources are the lack of knowledge, information about games relevant to the engineering of teaching software, and the lack of time to plan and include these approaches in the classroom.\nCosentino et al. (2017) [3]. They present a model-based ap- proach to learning modeling in a gamified way. The approach in- cludes a new language to model the gamification process itself and an environment where it can be incorporated into current mod- eling tools to allow instructors and students to design and use a complete modeling framework, including gamification elements. In addition, the approach also had as a proposal to provide support to collect and analyze gamification data, thus facilitating monitoring activities.\nYohannis (2016) [25]. This research presents an exploration of game design as an approach to strengthening the student’s mas- tery in software modeling by developing their abstraction skills. It brought together concepts of gamification development, such as the lens of atoms of intrinsic skill and principles of pedagogical design of various theories and models of learning. The research follows the Design Science Research Methodology and explores the best practices of Model Oriented Engineering. As a result, a modeling game design framework and generation structure and a series of produced games are presented.\nPedreira et al. (2015) [21]. They developed a systematic map- ping of gamification in Software Engineering based on 29 studies.\nThe mapping revealed that software implementation is the area in which most studies focus, followed by software requirements, few others in different areas, such as project planning and software testing, and even to a lesser extent in activities involving software modeling. However, the highlight of this work was to highlight that gamification in software engineering is still at a very early stage and the evidence on its impact in this field remains inconclusive.\n3.2 Comparative Analysis and Opportunities Five Comparison Criteria (CC) were defined selecting the most rele- vant variables to assist in the process of identifying similarities and differences between the proposed work and the selected articles.\nThis comparison is crucial to make the process of identifying re- search opportunities using objective rather than subjective criteria.\nThe criteria are described below: • Context (CC01): Works that explore the use of gamification in software modeling teaching/learning.\n• Participant profile (CC02): Studies that collected data from participants for screening and profile characterization.\n• Applicability of Gamification in UML (CC03): Studies that evaluated how gamification can contribute to UML mod- els.\n• Model creation (CC04): Studies that have developed a model to improve factors that imply the non-adoption of UML.\n• Instructor participation (CC05): Studies that collected qualitative data through the participation of software mod- eling instructors.\nTable 1 shows the comparison of the selected works, confronting this work. Some gaps and research opportunities are observed: (1) only the proposed work was the only one to fully meet all compar- ison criteria; (2) although most of them targeted the application of gamification in software modeling teaching, they were not di- rected to the use of UML; (3) no study has developed a model to evaluate the learning and improvement of UML models developed by students; and (4) most of them did not have the participation of instructors to identify the difficulties and opportunities in the application of gamification in the teaching of software modeling.\nThus, the next Section presents a quality model to explore these identified opportunities.\nRelated Work Comparison Criterion CC1 CC2 CC3 CC4 CC5 Proposed Work � � � � � Porto et al (2021) [4] � � � � � Marin (2021) [17] � � � � � Jurgelaitis et al (2018) [12] � � � � � Rodrigues et al (2018) [22] � � � � � Cosentino et al (2017) [3] � � � � � Yohannis (2016) [25] � � � � � Pedreira et al (2015) [21] � � � � � � Completely Meets � Partially Meets � Does not attend Table 1: Comparative analysis of the selected related works 4 PROPOSED QUALITY MODEL This section presents the proposed quality model to support soft- ware modeling learning in a gamified way. It serves as a frame of reference so that instructors can evaluate the UML models cre- ated by students through gamified activities. Section 4.1 presents a proposal of a generic analytical framework. Section 4.2 details the abstract syntax of the proposed quality model. Section 4.3 ex- plains the quality notions related to the gamified software modeling learning.\n4.1 Generic Analytical Framework Figure 1 presents the generic analytical framework for improving the quality of the models and serves as the basis for the creation of an evaluation scheme. The arrows (\"links\"), labeled as Evaluation and Gamified Modeling, represent the questions that the evidence must answer; dotted lines represent associations; rectangles rep- resent the Models (rounded corners) or the quality states (square corners) by which these bindings are measured. Ellipses represent the adverse effects that can be generated from the evaluation and use of gamification.\nThe numbers refer to the key questions and are connected with the concepts and relationships of the abstract syntax of the Quality 102 SBCARS ’21, September 27-October 1, 2021, Joinville, Brazil Ed Wilson Júnior and Kleinner Farias Figure 1: Generic analytical framework for gamified software modeling learning.\nModel (presented in Section 4.2), as follows: (1) Are there tools that assist instructors in evaluating the models developed by stu- dents, thus reducing the poor quality and incompleteness of these artifacts? (2) What is the prevalence of characteristics that cause models to be at risk? (3) Are there notions of quality to evaluate the models as a way to define parameters when performing their correction? (4) Applying the use of gamification in models that need intervention would be a way to identify factors that could generate models with high quality levels? (5) Does the application of gamification improve the quality of the model? (5.a) How are the models without gamification evaluated in relation to those with gamification? (5.b) Are there reasons to expect that gamification models can have better quality results than those that are gener- ated without gamification? (6) Is the output model really effective when associated with reducing the poor quality of the model? (7) Does the absence of evaluation result in adverse effects? (7.a) is the evaluation acceptable for the model? (7.b) What are the potential harms, and how often do they occur? (8) Does gamification result in adverse effects on models? Fact is that it is not enough just to include this \"toolbox\" in the UML learning process, it is necessary to provide the instructor with a model (guide) that can serve as a reference to evaluate the quality of diagrams elaborated through gamified activities. For example, the instructor could create models predefining inconsistencies by making use of these questions raised to evaluate the models created by the students. The set of questions serves as the starting point for this evaluation. Knowing that the adaptation of the gamification approach requires a significant effort [20], in this study we present The ModelGame as a way to identify factors that contribute to the quality of these artifacts and, consequently, to the students’ learning.\n4.2 Abstract Syntax Following the specification pattern of the UML metamodel, Figure 2 presents the abstract syntax of the proposed Quality Model for gamified software modeling learning (ModelGame). It identifies the main concepts and relationships. The numbers represent the notions of quality that are discussed in Section 4.3. The following are detailed each of these concepts and relationships.\nDomain. The first concept presented in this study is the domain, which corresponds to a specific context of the application to be developed to solve the problem. In this process, the design template represents the solution given to the domain.\nAssociation • contextualizes: Challenges[*] Each contextualise refers to the domain that will serve as the basis for the challenges launched.\nChallenges. This concept represents the phase in which the problem is contextualized (domain-based), as well as what will be the missions, phases, scenarios, and other elements presented to the players, in this case the students, who must use the principles of software engineering to perform the modeling and reach the final goal.\nAssociation • influences: Design Model[*] Each influence represents that the proposed challenge interfered in aspects of the design model, causing the user to seek to make a continuous improvement.\nModeling Language. Software modeling is an important step for development to happen in a way that adheres to the require- ments established by the requester, for this, there is the modeling language, which offers a standardized way to document and design software. Through the use of modeling languages, it is possible to achieve a high level of understanding about the software in ques- tion, improving the communication between all those involved in the process, thus avoiding implementation errors. It points out that software engineers use these languages to communicate design decisions and verify the feasibility of implementing the intended design. The UML was consolidated as the Modeling Language in the paradigm of object orientation, in which it is possible through visual notation generated from the diagrams- presented later in this study as Design Models- to perform the representation of various perspectives of the system.\nAssociation 103 ModelGame: A Quality Model for Gamified Software Modeling Learning SBCARS ’21, September 27-October 1, 2021, Joinville, Brazil Figure 2: Abstract Quality Model Syntax.\n• expresses: Design Model[*] Performs the representation of the intended design templates, in which the Modeling Language should be applicable to the domain type.\nUser. This concept corresponds to the individual who performs the interpretation of the developed design models, whose objective is to be able to understand the domain in question. In the gamified context, the user has the role of player and it is he who performs the whole process, being able to perform the interpretation of ex- isting models or even creating new ones. The user can also identify and resolve inconsistencies that arise from compositions between models.\nAssociation • creates: Design Model[1..*] Represents the process in which the user creates a design template, which can be one or more.\n• interprets: Design Model[1..*] In this association, the user performs the interpretation of the design template. When interpreting the model, paths for the resolution of inconsistencies can be identified.\n• detects: Inconsistency [*] Represents the user’s discovery of design model inconsistencies, for example, those that are generated from identifying conflicts, whether a class is abstract or not.\n• resolves: Inconsistency [*] Each resolves equates to the resolution representation of the incon- sistencies by the user that happens after he analyzes and determines the best alternative to perform this action.\n• uses: Modeling Tools [*] Determines that the user can use modeling tools to generate/update design models.\nAssociation • Without a directed relationship.\nModeling Tool. This concept represents the applications that are used to carry out the construction of design models. There are several tools available, online and desktop, and it is up to the user to choose the one that will best meet their needs and adapt to the context in question, that is, they work in any domain that is being considered.\nDesign Model. The design model refers to a visual notation (diagram) to represent static and dynamic aspects. These models are built according to a specific objective or task and tend to facilitate the logical interpretation of the software in several aspects. The most popular diagrams are Use Cases and Classes, the first being static and representing a set of actions generated from functional requirements (use cases) and presenting the interactions generated with external users (actors). The second is a static diagram and makes the representation of the logical structure of the software involving the classes, their attributes, methods, and relationships between them [19].\nAssociation • describes: Domain[1] Each describes makes the representation of a specific domain and means that every design model must describe it.\nInconsistency. It corresponds to the defects found in the models developed by users. They may occur because of the nonidentifi- cation and correction of possible conflicts and even an erroneous interpretation.\nAssociation • affects: Design Model[*] This association indicates that with each occurrence of the affect, a problem is presented harming the quality of the design model.\n104 SBCARS ’21, September 27-October 1, 2021, Joinville, Brazil Ed Wilson Júnior and Kleinner Farias Points. This concept represents one of the most used game me- chanics in software engineering and functions as a quantitative reward for each action developed, in which it is possible to regulate the number of rewarded points of the player, defined here as user, based on the importance of each action. Through this concept, it is possible to stimulate competition, collaboration, and creativity among users, stimulating learning. Points appear as a derivation of the association affects, since when each inconsistency error is identified or not, the user will receive a score and the association describes, because the points will also be applied when making connections between the model and the domain.\nProgress. The concept of progress emerges as a factor that makes the user able to perceive its evolution in the process, in this case, software modeling. Progress emerges as a derivation of the associa- tion interprets, making the user know when they have performed a correct interpretation of the proposed design model or what still needs to be improved.\nFeedback. Feedback has the role of making the user realize that the proposed goal can be achieved and follow its evolution, includ- ing analyzing how to change or creating new strategies to achieve the goal. This concept emerges as a derivation between the associa- tions it creates, causing the user to receive a return to the model creation process.\n4.3 Quality Notions As discussed in Section 2, gamification can bring important ele- ments for learning software modeling and, therefore, the objective of this section is to produce the notions of quality of the model of this study. The ModelGame is composed of ten counts, four of which are proposed in this study - scope, use, motivational and en- gagement - extracted from the main benefits that the gamification elements presented in Figure 2 can bring to the models. The others are adaptations of previous works [6, 14, 15], they are, syntactic, semantic, social, effort, detection and resolution.\nScope Quality (1). It seeks to determine how much the proposed challenge is contextualized with the design model, as well as the def- inition of the domain, problem, competencies, concepts, behaviors and attitudes that will be developed throughout the process.\nSyntactic Quality (2). This notion makes the representation of the process of correction of the design models that are produced by the modeling language, because if it is not used correctly, incon- sistencies will arise. It is important to insert this notion of quality into our study, since during the process of developing the models, users may come across the composition of two class diagrams, for example.\nSemantic Quality (3). It is necessary to verify that the design model and the problem domain match, so this notion performs this type of analysis. Communication problems may occur between users if the semantic elements of the model are affected.\nSocial Quality (4). Design models are used to communicate between members of a team to inform all established decisions about software development [8]. If divergent interpretations occur, this communication will be greatly impaired.\nQuality of Effort (5). This notion refers to the production chal- lenges of the model that will be generated, including factors such as time and cost.\nQuality of Use (6). To produce design templates, users can use unusual tools such as paper, whiteboard, and more. However, most of the time they choose to use formal tools (CASES) and can be online or desktop. This notion corresponds to the level of ease and applicability of the models elaborated when making use of these tools, it is also important to contribute to communication between users through collaboration-related functionalities.\nDetection Quality (7). This notion is referenced to the process of locating inconsistencies, since when users arise, they should perform traceability of them quickly. If the detection is complicated, it could hinder the process of correcting the models.\nResolution Quality (8). It corresponds to the level of quality related to the effort that users take to look for alternatives to solve the identified problem.\nMotivational Quality (9). This notion refers to the motiva- tional factors involved during the learning and development of design models, which can be intrinsic and extrinsic. Elements of gamification such as points, feedback and progress bring the user a degree of satisfaction in continuing their discovery and transfor- mations throughout the process.\nQuality of Engagement (10). The user in tracking their progress can feel committed to the objective in question, and this notion represents the measurement of the level of commitment of them during the development of design models.\n5 EVALUATION This section describes the methodology followed to evaluate the proposed quality model. This methodology follows well-established empirical guidelines [24]. Section 5.1 details the objective and re- search questions (RQ). Section 5.2 presents the questionnaire formu- lated to evaluate the proposed quality model. Section 5.3 explains the context and selection of participants. Section 5.4 describes the presentation of the Model. Section 5.5 presents the analysis of the collected data.\n5.1 Objective and Research Questions The objective (O) of this study is twofold: (O1) Introduce Model- Game as a tool for teaching Software Modeling; and (O2) Analyze the applicability of the quality model regarding the improvement of UML models.\nTo analyze the different facets of the objectives, two Research Questions (RQ) have been formulated: • RQ1: How do instructors evaluate the use of gamification in software modeling? • RQ2: What is the acceptance of ModelGame by software modeling instructors? 5.2 Questionnaire Data was collected through an online questionnaire created through Google Forms1 following well-established guidelines described in [24]. This strategy was chosen because the questionnaire could be applied quickly and easily collect data from individuals in geo- graphically diverse locations. The questions of the questionnaire 1Questionnaire: https://forms.gle/qjaFDpErEtGdLuWw6 105 ModelGame: A Quality Model for Gamified Software Modeling Learning SBCARS ’21, September 27-October 1, 2021, Joinville, Brazil were concerned with examining the research gaps of previous stud- ies and apprehending the structures of the previously developed questionnaire.\nPart 1: Participant profile. The first part of the questionnaire consisted of collecting data that are related to the characteristics and opinions of the participants. The creation of the participant profile through this data is important to make the selection of possible users of ModelGame. Without this profile, participants with an inadequate profile may generate inconsistent assessments.\nParticipants were asked to provide more general information, such as age, education level, academic background. Information about the time of experience in teaching was also considered, including teaching software modeling and level of knowledge about UML models.\nPart 2: TAM questionnaire. The second part addressed ques- tions about the usability and acceptance of the technique, aiming to explore q3. To this end, this part of our questionnaire is based on the technology acceptance model (TAM) [16]. This part contained nine questions, which were answered through the Likert Scale, in- cluding Totally Agree, Partially Agree, Neutral, Partially Disagree, and Totally Disagree. The questions formulated (Q) dealt with sev- eral topics, including perceived ease of use (Q1-3), perceived utility (Q4-7), attitude towards use (Q8), and behavioral intention to use (Q9).\n5.3 Selection of participants The participants were selected based on the following criteria: in- structors and/or professionals working in the teaching of software modeling in higher education institutions in Brazil. Using this cri- terion, we sought to select participants with academic training and practical experience in teaching. This finite set of all possible participants represents the target population [13]. This popula- tion represents those people who are in a position to answer the questions formulated and to whom the results of the survey apply [13]. In all, 19 people (n) answered the questionnaire. The partici- pants were invited via e-mail to participate in the study and each of them previously received the explanation/training about the model proposed through the researcher and there was no doubt, they could leave for the next step that consisted of completing the TAM questionnaire. We discussed the experimental process in the next section.\n5.4 Experimental Process Figure 3 presents the experimental process used in this study, which is composed of three phases discussed below: Phase 1: Presentation. It has an activity, presentation, in which the researcher explained to the participants through a video detail about the quality model. This process took place individually and in a standard way, where space was also made available for par- ticipants to answer possible doubts about the proposed study and model, lasting an average of 20 minutes.\nPhase 2: Application of the TAM questionnaire. It has two activities, the first being Collect demographic data. The participants answered a list of questions (input) so that we could collect their characteristics and opinions about the ModelGame. The demo- graphic data collected (output) became the result of this activity.\nThe second activity Apply TAM questionnaire (input). Participants received a list of questions about the perception of ease of use, per- ceived utility, attitudes, and intention of behavior, in relation to the ModelGame. Qualitative data (output) were generated, regarding the usability and acceptance of the Model under the perspective of professionals who teach software modeling. This questionnaire followed the guidelines of the TAM [16].\nPhase 3: Analysis and result report. It has two activities. The first, Analyze data sought to perform a thorough analysis of the data collected through the questionnaire and the researcher’s perception regarding the participants’ doubts during the presentation stage.\nFor this, the collected data were analyzed separately, as well as con- fronted, aiming to perform a triangulation of them. Subsequently, there was an Evaluation data, as a way to understand in a more depth the context, the perceptions of the participants in relation to the proposed model as well as its applicability.\nFigure 3: The experimental process.\n5.5 Result Analysis 5.5.1 Profile data of the participants. Table 3 describes the profile data, reporting the characteristics and opinions of the participants.\nThese data were collected from May 18 to June 5, 2021. In total, we had 19 participants. Our participants are between 20 and 49 years old, most of them have a degree in Computer Science (52.6%), Information Systems (26.3%) or Systems Analysis (21.1%) and are specialists (36.8%), masters (36.8%) and doctors (15.8%). About the working time in teaching, the majority (42.1%) they have been teach- ing for more than 8 years and teach disciplines related to software modeling, including software engineering, systems analysis and software projects. A total of 47.4% have a full level of knowledge about UML and almost half of them (47.4%) has not yet used gamifi- cation in the teaching of software modeling. Therefore, we consider 106 SBCARS ’21, September 27-October 1, 2021, Joinville, Brazil Ed Wilson Júnior and Kleinner Farias Totally agree Partially agree Neutral Partially disagree Totally disagree Perceived ease of use I found the quality model easy to use 8 9 2 0 0 I found the quality model easy to learn 10 9 0 0 0 I found the quality model easy to master 6 12 0 1 0 Perceived usefulness The model would make it easier to understand which elements of gamification can be used in modeling .\n12 5 2 0 0 Using the quality model would help increase productivity.\n9 8 2 0 0 The model would provide an understanding of how to mitigate the incompleteness of UML diagrams.\n5 8 5 1 0 The model would help compare theories about gamification in software modeling teaching.\n13 4 2 Attitude towards use Using the Quality Model for Gamified Software Modeling Learning is a good idea.\n13 5 1 0 0 Behavioral intention to use I would use the quality model in software modeling classes.\n10 7 2 0 0 Table 2: Collected data related to TAM questionnaire.\nthat although small, our sample is adequate to carry out an initial evaluation of the proposed approach.\nCharacteristic and Opinion (n=19) Answer # % Age < 20 years 0 0.0% 20-29 years 4 21.1% 30-39 years 8 42.1% 40-49 years 5 26.3% > 49 years 2 10.5% Education Undergraduate* 0 0.0% Specialization* 7 36.8% Master* 7 36.8% PhD* 3 15.8% Others 2 10.6% Undergraduate course Information Systems 5 26.3% Computer Science 10 52.6% Computer Engineering 0 0.0% System Analysis 4 21,1% Others 0 0.0% Time of experience in teaching < 2 years 4 21.1% 2-4 years 2 10.5% 5-6 years 3 15.8% 7-8 years 2 10.5% > 8 years 8 42.1% Experience in teaching < 2 years 3 15.8% software modeling 2-4 years 5 26.3% 5-6 years 3 15.8% 7-8 years 2 10.5% > 8 years 6 31,6% Level of knowledge Beginner 2 10.5% about UML models Junior 5 26.3% Full 9 47.4% Senior 3 15.8% Used gamification in teaching Yes 9 47.4% No 9 47,4% Maybe 1 5.3% Gamification can contribute to the quality Totally agree 10 52.6% of the models of UML diagrams generated Partially agree 8 42.1% by students Neutral 1 5.3% Partially disagree 0 0.0% Totally disagree 0 0.0% Table 3: The profile data of the participants.\n5.5.2 RQ1: How do instructors evaluate the use of gamification in software modeling? Table 3 presents the collected data related to the RQ formulated. First, we begin the analysis by verifying how instructors visualize gamification in software modeling teaching.\nAlthough most of them (47.4%) have not yet used gamification elements (scores, challenge, emblem, among others) in their classes, most (52.6%) totally agree and (42.1%) partially agree that the use of these can contribute to the quality of the models developed by the students.\nWe consider the percentage of instructors who have not yet used gamification in their classes to be high and this may be tied to factors such as lack of knowledge, information about the tool, and even time to plan and include these approaches [22]. Although they were based on software modeling teaching context, previous studies [3, 4, 12, 17, 25] they did not count on the participation of instructors and we understand that this participation is fundamental to understand the perceptions of these professionals since they will be at the forefront of the use of gamification.\nThe ModelGame proposed in this study could help them insert gamification into their classes, according to the software modeling learning design [25], based on the assumption that for this, it is necessary to develop a better understanding of the tasks, activities, skills and operations that the different elements of gamification can offer and how they can correspond to the desired learning outcomes by developing a more concrete and motivating presentation that can involve students and facilitate deep learning with UML.\n5.5.3 RQ2: What is the acceptance of the ModelGame by software modeling instructors? Using the TAM questionnaire, we tried to evaluate the ease of use, perceived usefulness, attitude, and behav- ioral intention to use the Quality Model. Table 2 shows the data obtained. Our data obtained show that no one disagreed that the ModelGame is easy to use, learn, and master. On the contrary, al- most 90% of participants find the model easy to use (42.1% totally agree and 47.4% partially agrees and 10.5% neutral), learn (52.6% 107 ModelGame: A Quality Model for Gamified Software Modeling Learning SBCARS ’21, September 27-October 1, 2021, Joinville, Brazil fully agree and 47.4% partially agree) and master (31.6% fully agree, 63.2% partially agree and 5.3% partially disagree).\nThe results are also favorable considering the perception of util- ity. Most participants realized that the ModelGame would make it easier to understand which elements of gamification can be used in each of the phases of modeling using UML(63.3% totally agree, 26.3% partially agree and 10.5% neutral), increase productivity (47.4% fully agree, 42.1% partially agree and 10.5% neutral), and the use of the quality model would provide an understanding of how to mitigate the incompleteness of UML diagrams (26.3% agree totalmen 42.1% partially agree, 26.3% neutral and 5.3% partially disagree). Still in the useful aspect, we tried to know if the quality model would help to compare validated theories about the inclusion of gamification in software modeling teaching (68.4% totally agree, 21.1% partially agree and 10.5% neutral).\nConsidering the attitude towards use, participants believe that using the ModelGame is a good idea (68.4% totally agree, 26.3% partially agree and 5.3% neutral), just as they are confident and would use the Model in software modeling classes (52.6% totally agree, 36.8% partially agree and 10.5% neutral). These findings show the potential for acceptance by people with profiles similar to those of participants. The results are encouraging and show the potential to use the proposed approach in the educational scenario.\n6 THREATS TO VALIDITY This section discusses the possible threats to the validity of the study.\nInternal validity. The main point affecting the internal validity of our study concerns the total time used for the exploratory phase.\nTo mitigate this threat, we performed the video recording of a pilot explaining the operating details and objectives of the ModelGame.\nIn relation to the methods used, the threats related to internal validity relate to how we extract the perceptions of the discussions and whether they represent the perceptions of teachers about the use of the Model. We try to reduce this threat by applying the TAM questionnaire.\nExternal validity. We identified threats related to external va- lidity, such as the number of participants who never applied the use of gamification. This study was limited to 19 participants (teachers) from various educational institutions, of which 9 (47.4%) never used any element of gamification in their classes, this factor can interfere in the data, since the model intends to evaluate the quality of UML diagrams from gamified activities.\nConclusion validity. Threats related to the validity of the con- clusion are related to treatment and outcome. We try to make the reduction by combining quantitative and qualitative data through different resources. These data were obtained through audio and questionnaires. We analyze this data to answer the research ques- tions.\n7 CONCLUSIONS AND FUTURE WORK This study proposed an initial quality model (ModelGame) that serves as a reference framework for instructors for qualitative eval- uations of UML models developed from gamified activities, the application of an empirical study with 19 participants was carried out to understand their vision in relation to gamification and the acceptance of the proposed Model. It was identified that most have not yet used gamification in their classes, but agree that their use can contribute to the quality of the models developed by the stu- dents and were open to using the model. Our findings can enhance the adoption of new teaching practices through gamification, result- ing in the improvement of software modeling learning using UML, and consequently the creation of models developed by students.\nThese approaches can stimulate students’ immersion in the design of systems as future professionals during learning.\nFinally, we hope to carry out in the future a series of experimental studies to analyze each stage of application of the ModelGame and that this work represents a first step to better support the application of empirical studies on models of evaluation of the use of gamification in software modeling. We also hope that the questions described throughout the article will encourage other researchers to extend our study to different modeling languages and teaching methodologies."],"url_pdf":["E:/courses/Nouveau/Article_03.pdf"],"auteurs":["Ed Wilson","Kleinner Farias Universidade"],"validated":[false],"titre":["ModelGame - A Quality Model for Gamified Software Modeling Learning"],"mots_cles":["KEYWORDS Model design","learning model","Gamification"],"references_bibliographiques":["Rick Adcock, Edward Alef, Bruce Amato, Mark Ardis, Larry Bernstein, Barry Boehm, Pierre Bourque, John Brackett, Murray Cantor, Lillian Cassel, et al. 2009.\nCurriculum guidelines for graduate degree programs in software engineering. ACM.","Mark Ardis, David Budgen, Gregory W Hislop, Jeff Offutt, Mark Sebern, and Willem Visser. 2015. SE 2014: Curriculum guidelines for undergraduate degree programs in software engineering. Computer 48, 11 (2015), 106–109.","Valerio Cosentino, Sébastien Gérard, and Jordi Cabot Sagrera. 2017. A model- based approach to gamify the learning of modeling. CEUR Workshop Proceed- ings.","Daniel de Paula Porto, Gabriela Martins de Jesus, Fabiano Cutigi Ferrari, and Sandra Camargo Pinto Ferraz Fabbri. 2021. Initiatives and challenges of using gamification in software engineering: A Systematic Mapping. Journal of Systems and Software 173 (2021), 110870.","Sebastian Deterding, Miguel Sicart, Lennart Nacke, Kenton O’Hara, and Dan Dixon. 2011. Gamification. using game-design elements in non-gaming contexts.\nIn CHI’11 extended abstracts on human factors in computing systems. 2425–2428.","Ana Fernández-Saez et al. 2012. A systematic literature review on the quality of UML models. J. Data. Manage 22, 3 (2012), 46–70.","Kleinner Farias et al. 2012. Evaluating the impact of aspects on inconsistency detection effort: a controlled experiment. In International Conference on Model Driven Engineering Languages and Systems. Springer, 219–234.","Kleinner Frias et al. 2014. Towards a quality model for model composition effort.\nIn 29th Annual ACM Symposium on Applied Computing. 1181–1183.","Kleinner Farias et al. 2015. Evaluating the effort of composing design models: a controlled experiment. Software & Systems Modeling 14, 4 (2015), 1349–1365.","Kleinner Farias et al. 2019. UML2Merge: a UML extension for model merging.\nIET Software 13, 6 (2019), 575–586.","Juho Hamari, Jonna Koivisto, and Harri Sarsa. 2014. Does gamification work?– a literature review of empirical studies on gamification. In 2014 47th Hawaii international conference on system sciences. Ieee, 3025–3034.","Mantas Jurgelaitis, Vaidotas Drungilas, and Lina Čeponien˙e. 2018. Gamified Moodle course for teaching UML. Baltic journal of modern computing 6, 2 (2018), 119–127.","Barbara A Kitchenham and Shari L Pfleeger. 2008. Personal opinion surveys. In Guide to advanced empirical software engineering. Springer, 63–92.","Christian Franz Josef Lange. 2007. Assessing and Improving the Quality of Modeling: A series of Empirical Studies about the UML. (2007).","Odd Ivar Lindland, Guttorm Sindre, and Arne Solvberg. 1994. Understanding quality in conceptual modeling. IEEE software 11, 2 (1994), 42–49.","Nikola Marangunić and Andrina Granić. 2015. Technology acceptance model: a literature review from 1986 to 2013. Universal access in the information society 14, 1 (2015), 81–95.\n108 SBCARS ’21, September 27-October 1, 2021, Joinville, Brazil Ed Wilson Júnior and Kleinner Farias","Beatriz Marín. 2021. Lessons Learned About Gamification in Software Engineer- ing Education. In Latin American Women and Research Contributions to the IT Field. IGI Global, 174–197.","Kleinner Oliveira, Alessandro Garcia, and Jon Whittle. 2008. On the quantitative assessment of class model compositions: An exploratory study. 1th ESMDE at MODELS (2008).","OMG.\n2017.\nUML: Infrastructure specification.\nhttps://www.omg.org/spec/UML/2.5.1/PDF.","Sofia Ouhbi and Nuno Pombo. 2020. Software Engineering Education: Challenges and Perspectives. In IEEE Global Engineering Education Conference. 202–209.","Oscar Pedreira, Félix García, Nieves Brisaboa, and Mario Piattini. 2015. Gamifica- tion in software engineering–A systematic mapping. Information and software technology 57 (2015), 157–168.","Pedro Rodrigues, Mauricio Souza, and Eduardo Figueiredo. 2018. Games and gamification in software engineering education: A survey with educators. In 2018 IEEE Frontiers in Education Conference (FIE). IEEE, 1–9.","Kevin Werbach and Dan Hunter. 2012. For the win: How game thinking can revolutionize your business. Wharton digital press.","Claes Wohlin, Per Runeson, Martin Höst, Magnus C Ohlsson, Björn Regnell, and Anders Wesslén. 2012. Experimentation in software engineering. Springer Science & Business Media.","Alfa Yohannis. 2016. Gamification of Software Modelling Learning.. In DS@ MoDELS.\n109"]}},{"_index":"tp_igl11","_id":"qJpzbo0B5PBXeLSByR-y","_version":1,"_score":1,"fields":{"institutions":["AI Model for Computer","Athens Information Technology","Athens Information Technology"],"resume":["Abstract Making efficient AI models for games with imperfect  information can be a particular challenge. Considering the large  number of possible moves and the incorporated uncertainties  building game trees for these games becomes very difficult due to  the exponential growth of the number of nodes at each level. This  effort is focused on presenting a method of combined Case Based  Reasoning (CBR) with AI Planning which drastically reduces the  size of game trees. Instead of looking at all possible combinations  we can focus only on the moves that lead us to specific strategies  in effect discarding meaningless moves. These strategies are  selected by finding similarities to cases in the CBR database. The  strategies are formed by a set of desired goals. The AI planning is  responsible for creating a plan to reach these goals. The plan is  basically a set of moves that brings the player to this goal. By  following these steps and not regarding the vast number of other  possible moves the model develops Game Trees which grows  slower so they can be built with more feature moves restricted by  the same amount of memory."],"texte_integral":["Introduction  The goal of this effort is to explore a model for design and  implementation of an AI agent for turn based games. This model  provides for building more capable computer opponents that rely  on strategies that closely resemble human approach in solving  problems opposed to classical computational centric heuristics in  game AI. In this manner the computational resources can be  focused on more sensible strategies for the game play.   With the advancement in computer hardware increasingly  more computing power is left for executing AI algorithms in  games. In the past AI in games was mainly a cheating set of  instructions that simulated the increasing difficulty in the game  environment so that the player had the illusion of real counterpart.  Improvement in available memory and processing power allows  implementation of more intelligent algorithms for building the  game environment as well as direct interaction with the human  players.    In this particular research the emphasis is put on the  interaction between the AI agent and a computer player in the  realm of the game rules. It is particularly focused on turn based  games that have the elements of uncertainty like dice or concealed  information. At the beginning a description of Game AI  algorithms are given; such as Game Trees and Minimax. The  following section describes an approach of using AI Planning to  improve building Game Trees in games with imperfect  information where Game Trees tend to be very large with high  growth ratio. Section 4 discusses another approach that provides a  significant reduction to the number of considered moves in order  to find the favorable strategy of the AI player. This approach uses  AI Planning techniques and Case Base Reasoning (CBR) to plan  for different scenarios in predetermined strategies which would be  analogous to human player experience in the particular game. The  CBR database illustrates a set of past experiences for the AI  problem and the AI Planning illustrates the procedure to deal with  the given situation in the game. In the next two sections  implementations and evaluations of both approaches are given.  The AI Planning approach is implemented with the Tic-tac-toe  game and the combined AI Planning and CBR approach is  implemented with a model for the Monopoly game. The last part  contains conclusions and future work ideas.   2. Game Trees and Minimax  Game Trees are common model for evaluating how different  combinations of moves from the player and his opponents will  affect the future position of the player and eventually the end  result of the game. An algorithm that decides on the next move by  evaluating the results from the built Game Tree is minimax [1].  Minimax assumes that the player at hand will always choose the  best possible move for him, in other words the player will try to  select the move that maximizes the result of the evaluation  function over the game state. So basically the player at hand needs  to choose the best move overall while taking into account that the  next player(s) will try to do the same thing. Minimax tries to  maximize the minimum gain. Minimax can be applied to multiple  Permission to make digital or hard copies of all or part of this work for  personal or classroom use is granted without fee provided that copies are  not made or distributed for profit or commercial advantage and that  copies bear this notice and the full citation on the first page. To copy  otherwise, or republish, to post on servers or to redistribute to lists,  requires prior specific permission and/or a fee.  DIMEA’08, September 10–12, 2008, Athens, Greece.  Copyright 2008 ACM 978-1-60558-248-1/08/09... $5.00  Interactive and Adaptable Media 295 3rd International Conference on Digital Interactive Media in Entertainment and Arts levels of nodes on the game tree, where the leaves bring the final  known (or considered) game state.   The minimax theorem states:  For every two-person, zero-sum game there is a mixed strategy  for each player, such that the expected payoff for both is the same  value V when the players use these strategies. Furthermore, V is  the best payoff each can expect to receive from a play of the  game; that is, these mixed strategies are the optimal strategies for  the two players.  This theorem was established by John von Neumann, who is  quoted as saying \"As far as I can see, there could be no theory of  games … without that theorem … I thought there was nothing  worth publishing until the Minimax Theorem was proved\" [2].  A simple example of minimax can be observed by building a  game tree of the tic-tac-toe game. The tic-tac-toe game is a simple  game which can end by the first player wining, the second player  wining or a tie. There are nine positions for each of the players in  which at each turn the player puts X or O sign. If the player has  three adjacent signs in a row, column or the two diagonals he or  she wins. This game has limited number of position and it is well  suited for building the whole game tree. The leaves of this tree  will be final positions in the game. A heuristics evaluation  function will also need to be written to evaluate the value of each  node along the way.  3. AI Planning for building Game Trees  3.1.1 AI Planning  AI Planning also referred as Automated Planning and  Scheduling is a branch of Artificial Intelligence that focuses on  finding strategies or sequences of actions that reach a predefined  goal [3]. Typical execution of AI Planning algorithms is by  intelligent agents, autonomous robots and unmanned vehicles.  Opposed to classical control or classification AI Planning results  with complex solutions that are derived from multidimensional  space.   AI Planning algorithms are also common in the video game  development. They solve broad range of problems from path  finding to action planning. A typical planner takes three inputs: a  description of the initial state of the world, a description of the  desired goal, and a set of possible actions. Some efforts for  incorporating planning techniques for building game trees have  also shown up, similar to the approach explored in this effort. In  addition Cased Based Reasoning [4] techniques are also gathering  popularity in developing strategies based in prior knowledge  about the problems in the games. One of the benefits from  Hierarchical Task Network (HTN) [5] planning is the possibility  to build Game Trees based on HTN plans; this method is  described in the following section.  3.2 Game Trees with AI Planning  An adaptation of the HTN planning can be used to build  much smaller and more efficient game trees. This idea has already  been implemented in the Bridge Baron a computer program for  the game of Contact Bridge [6].  Computer programs based on Game Tree search techniques  are now as good as or better than humans in many games like  Chess [7] and checkers [8], but there are some difficulties in  building a game tree for games that have imperfect information  and added uncertainty like card or games with dice. The main  problem is the enormous number of possibilities that the player  can choose from in making his move. In addition some of the  moves are accompanied with probabilities based on the random  elements in the games. The number of possible moves  exponentially grows with each move so the depth of the search  has to be very limited to accommodate for the memory  limitations.   The basic idea behind using HTN for building game trees is  that the HTN provides the means of expressing high level goals  and describing strategies how to reach those goals. These goals  may be decomposed in goals at lower level called sub-goals. This  approach closely resembles the way a human player usually  addresses a complex problem. It is also good for domains where  classical search for solution is not feasible due to the vastness of  the problem domain or uncertainties.  3.2.1 Hierarchical Task Networks  The Hierarchical Task Network, or HTN, is an approach to  automated planning in which the dependency among actions can  be given in the form of networks [9] [Figure 1].  A simple task network (or just a task network for short) is an  acyclic digraph � � ��� �� in which U is the node set, E is the  edge set, and each node � � � contains a task ��. The edges of � define a partial ordering of U. If the partial ordering is total, then  we say that � is totally ordered, in which case � can be written as  a sequence of tasks � � ���� ��� � � ���.\nFigure 1: Simple Hierarchical Task Network  A Simple Task Network (STN) method is a 4-tuple of its name,  task, precondition and a task network. The name of the method  lets us refer unambiguously to substitution instances of the  method, without having to write the preconditions and effects  explicitly. The task tells what kind of task can be applied if the  preconditions are met. The preconditions specify the conditions  that the current state needs to satisfy in order for the method to be  applied. And the network defines the specific subtasks to  accomplish in order to accomplish the task.  A method is relevant for a task if the current state satisfies the  preconditions of a method that implements that task. This task can  be then substituted with the instance of the method. The  substitution is basically giving the method network as a solution  for the task.  If there is a task “Go home” and the distance to home is 3km  [Figure 2] and there exists a method walk-to and this method has a  precondition that the distance is less than 5km, then a substation  to the task “Go home” can be made with this method instance.   Figure 2: HTN Method  Buy milk Go to (shop) Purchase  Go to (home) Go-to (from, to) Walk (to) If (to – from) < 5km  296 DIMEA 2008 3rd International Conference on Digital Interactive Media in Entertainment and Arts If the distance is larger than 5km another meth to be substituted [Figure 3].  Figure 3: HTN Method 2  An STN planning domain is a set of operatio methods M. A STN planning problem is a 4-tu state S0, the task network w called initial task STN domain. A plan � � ���� � � ��� is a soluti problem if there is a way to decompose w into π and each decomposition is applicable in the ap the world. The algorithm that is capable to  networks into plans is called Total-forward-deco [9] or Partial-forward-decomposition (PFD). H cases where one does not want to use a forwa procedure. HTN planning is generalization of S gives the planning procedure more freedom construct the task networks.   In order to provide this freedom, a bookke is needed to represent constraints that the plann not yet enforced. The bookkeeping is done by unenforced constraints explicitly in the task netw The HTN generalizes the definition of a STN. A task network is the pair � � ��� �� w task nodes and C is a set of constraints. Eac specifies a requirement that must be satisfied by a solution to a planning problem.   The definition of a method in HTN also definition used in STN planning. A HTN pla name, task, subtasks, and constraints. The s constraints form the task network. The HTN plan identical to STN planning domains except they u instead of STN methods.  Compared to classical planners the prim HTN planners is their sophisticated knowledge r reasoning capabilities. They can represent and  non-classical planning problems; with a good guide them, they can solve classical planning p magnitude more quickly than classical or neoc The primary disadvantage of HTN is the nee author to write not only a set of planning opera of methods.  3.2.2 HTN Planning in building Game  For a HTN planning algorithm to be adap trees we need to define the domain (set of H operators) which is the domain of the game. Thi a knowledge representation of the rules of the environments and possible strategies of game pla In this domain the game rules as well as kn tackle specific task are defined.   The implem Tree building with HTN is called Tign implementation  uses  a  procedure  simila decomposition, but adapted to build up a game  Drive(to If(t Go-to (from, to)  If(to – from) < 5km  Walk (to)  hod instance needs  ons O and a set of  uple of the initial  k network and the  ion for a planning  π if π is executable  ppropriate state of  decompose these  omposition (TFD)  However there are  ard-decomposition  STN planning that  m about how to  eeping mechanism  ning algorithm has  y representing the  work.  a task network in  where � is a set of  h constraint in C  y every plan that is  o generalizes the  an is a 4-tuple of  subtasks and the  nning domains are  use HTN methods  mary advantage of  representation and  solve a variety of  d set of HTNs to  problems orders of  classical planners.  ed of the domain  ators but also a set  Trees ted to build game  HTN methods and  is is in some sense  e game, the game  ay.\nnown strategies to  mentation of Game  num2 [9]. This  ar  to  forward- tree rather than a  plan. The branches of the game tree rep the methods. Tignum2 applies all met state of the world to produce new continues recursively until there are n have not already been applied to th world.   In the task network generated by Tignu actions will occur is determined by th By listing the actions in the order  network can be “serialized” into a gam 4. Case Based Reasoning in 4.1 Case Based Reasoning Case-based reasoning (CBR) is a  Artificial Intelligence (AI), both as  problems and as a basis for standalone  Case-based reasoning is a paradigm solving and learning that has became  applied subfield of AI of recent yea intuition that problems tend to recur. I are often similar to previously en therefore, that past solutions may be of [10].   CBR is particularly applicable to probl available, even when the domain is n for a deep domain model. Helpdesks, systems have been the most successfu to determine a fault or diagnostic  attributes, or to determine whether or repair is necessary given a set of past s Figure 5: Game Tree built fr Figure 4: HTN to Game Tr ) to – from) < 200km  present moves generated by  thods applicable to a given  w states of the world and  no applicable methods that  he appropriate state of the  um2, the order in which the  e total-ordering constraints.  they will occur, the task  me tree [Figure 4] [Figure 5].  n Game Strategies well established subfield of  a mean for addressing AI  AI technology.\nm for combining problem- one of the most successful  ars. CBR is based on the  It means that new problems  ncountered problems and,  f use in the current situation  lems where earlier cases are  not understood well enough  , diagnosis or classification  ul areas of application, e.g.,  an illness from observed  r not a certain treatment or  olved cases [11].  rom HTN ree Algorithm Interactive and Adaptable Media 297 3rd International Conference on Digital Interactive Media in Entertainment and Arts Central tasks that all CBR methods have to deal with are [12]: \"to  identify the current problem situation, find a past case similar to  the new one, use that case to suggest a solution to the current  problem, evaluate the proposed solution, and update the system by  learning from this experience. How this is done, what part of the  process that is focused, what type of problems that drives the  methods, etc. varies considerably, however\".   While the underlying ideas of CBR can be applied  consistently  across  application  domains,  the  specific  implementation of the CBR methods –in particular retrieval and  similarity functions– is highly customized to the application at  hand.  4.2 CBR and Games  Many different implementations of CBR exist in games.  CBR technology is nicely suited for recognizing complex  situations much easier and more elegant than traditional parameter  comparison or function evaluation. There are especially evident  cases in real time strategies where different attack and defense of  global strategies are nicely defined by CBR datasets and later used  in the running games. Also intelligent bots behavior is also  another typical example. Depending on the number of enemy bots  the layout of the terrain and position of human players the CBR  system finds the closest CBR case and employs that strategy  against the human players which in prior evaluation was proved to  be highly efficient.  5. Game Trees with AI Planning – Tic-tac-toe  In order to show the expressive power of AI Planning in  defining strategies for games, and the use of these plans to build  Game Trees I implemented an algorithm that builds Game Trees  for the Tic-Tac-Toe game.  The game tree of Tic-Tac-Toe shows 255,168 possible  games of which 131,184 are won by X (the first player), 77904  are won by O and the rest 46,080 are draw [13]. All these games  can be derived from building a complete Game Tree.   Even though it is possible to build a complete game tree of  Tic-tac-toe it is definitely not an optimal solution. Many of the  moves in this tree would be symmetrical and also there are a many  moves that would be illogical or at least a bad strategy to even  consider.   So what strategy should X (the first player) choose in order  to win the game?  There are few positions that lead to certain victory. These  positions involve simultaneous attack on two positions so the  other player could not defend, basically the only trick in Tic-Tac- Toe.  Figure 6: Tic-tac-toe winning strategy positions  Position 1 leads to victory if the two of the three fields: top  middle, bottom left corner and bottom right corner are free  [Figure 6].  Position 2 lead to victory if two of the three fields: top right  corner, bottom right corner and bottom middle are free [Figure ].  And in the third position if the two of center, middle top and  middle left are available the position is a certain victory.  There are many different arrangements of the player’s tokens  that give equivalent positions as these three positions. By using  planning we do not need to consider all possible layouts but just  consider these three similar to what a human would consider.   The game starts from an empty table.  The two relevant strategies that would lead to these positions  are to take one corner or to take the center [Figure 7].  Figure 7: Tic-tac-toe Two starting moves  The center position as we can see in the simulation results  lead to a bigger number of victorious endings but it is also a  straight forward strategy with obvious defense strategy.  At this point we need to consider the moves of the opponent.  If we take the left branch the opponent moves can be a center, a  corner or a middle field. We also need to differentiate with a  move to a corner adjacent with our like top left or bottom right or  across the center to bottom right [Figure 8].  Figure 8: Tic-tac-toe opponent response to corner move  In cases one and two, we have a clear path to executing  strategy 3 so we need to capture the diagonally opposite field.  And as for the third case the best way to go is to capture the center  and go for strategy 1 or 2 depending of the opponent’s next move.   Figure 9: Tic-tac-toe move 2 after corner opening  The first move leads to certain victory, O will have to go to  the center and X will achieve strategy 3 [Figure 9]. The second  move is a possible way to strategy 3 if O makes a mistake in the  next loop, so X goes to the opposite corner. For the third case  since O is playing a valid strategy the only move that leaves a  possible mistake from O would be to take the center and wait for  O to go to the middle and then achieve strategy 1 or 3 which will  be a symmetric situation to the one that we will find if we  branched with the center.  Figure 10: Tic-tac-toe opponent response to center move  If we go back to the second branch [Figure 10], a possible  way for the second player to engage is corner or middle. The first  298 DIMEA 2008 3rd International Conference on Digital Interactive Media in Entertainment and Arts move is a valid strategy for O and can be mee corner move from X to try a mistake from O in  the same as in the third case above from the pre another move would be go to the middle wh achieves strategy 1 or 2.   Figure 11: Tic-tac-toe Move 2 after cent The fist move will lead to win if O moves  draw if it goes for the corners [Figure 11]. In t has to block the lower left corner which leave middle left or corner left which are strategy 1 and To sum the strategies for the planning, first  corner strategy for the beginning. Then for the ce the corners with the particularly the one oppo holds. If the center is empty for the second strate we go for the opposite corner. After this point w opponent or try to implement strategies 1, 2 or victory.   Plan 1: Take center   Preconditions: Center empty  Plan 2: Take corner   Preconditions: All corners empty  Plan 3: Take corner after center  Preconditions: We have center take corner oppos opponent has  Plan 4: Take diagonal corner  Preconditions: We have a corner, the opponent ha  the corner opposite to the one we have is free.  Plan 5: Block  Precondition: The opponent has tree tokens in a r agonal  Plan 6: Win  Preconditions: We have two tokens in a row, colu nd the third place is free  Plan 7: Tie  Preconditions: If all places are taken, it’s a tie.  5.1 Hierarchical Task Network  Top level task is Play [Figure 12]. This is a  can be derived into: Win, Block, Tie or Sear Search for plan is derived to both Plan 1 and Pla Plan 4, which later leads to a call for the oppon recursive call to Play.  Figure 12: Tic-tac-toe HT et with a opposite  the future exactly  evious branch, and  here X eventually  ter opening to the middle or a  the second case O  es X to go for the  d 2.\nwe have center or  enter we try to get  osite to the one O  egy we go for it or  we either block the  r 3 which lead to  site to the  one the  as the ce−nter and row, colu−mn or di mn or dia−gonal a a complex task and  rch for Plan. The  an 2 or Plan 3 and  nent’s move and a  TN This HTN when executed will re game scenarios. By creating nodes from them with branches with the move of t tree for the Tic-tac-toe game over whi algorithm.  This set up with 7 plans with 3 ta for Tic-tac-toe which considers all pos player with only 457 games, 281 of w and 0 where the second opponent w reduction over the 255, 168 possible g tree. These reductions can be very use computing capabilities but also we pr that planning can be very efficient if d trees by applying reasoning very  reasoning.  Further improvements to the gam the opponents moves are also planned all the meaningless and symmetrical m 6. Game AI in Monopoly  6.1 Overview of the AI Imp The AI agent is responsible for  players in the game. The core principle a Game Tree with all the sensible move make from the current point of time minimax algorithm the agent selects t would bring the computer player mo with the highest probability. Building  that would be big enough to consider  is obstructed by the vastness of poss with all the possible random landings  nodes of the game tree exponentially tackle this problem the AI agents  discussed technologies: Case Based Re The technologies are employed  First the agent searches the CBR datab largest similarity with the current state associated with a playing strategy. Th that the planner needs to build plans f consecutive player moves that bring th way only moves that are part of that str being a small fraction of the overall po edges of the game tree at each level dec At each level of the game tree the of a single player. After the strateg considered the response to those strate by the opponent(s). The move of the  probability distribution of the dice as  player. A more general strategy needs opponent’s (human player) moves sin the expertise of the opponent. This ge more plausible moves than the focused After covering all opponents t deducting a feature move of the com CBR selected plan strategy. After  strategies and reaching a reasonable s into account the memory limits an probabilities that the move is possible the dice the building of the Game Tre algorithm searches the Game Tree  favorable move for the AI player usi The process is repeated each time the A esult with plans for possible  m each position and linking  the player we create a game  ich we can run the minimax  arget strategies creates a tree  ssible moves for the second  which X wins 176 are draw  wins. This is a significant  ames with a complete game  eful for devices with limited  rove a very important point  designing meaningful game  similar to human player  me tree are also possible if  d, in other words if we drop  moves of the opponent.  plementation the moves of the artificial  e of the AI agent is building  es that all the players would  e forward. Then using the  the move that in the future  ost favorable game position  a Game Tree in this game  sufficient number of moves  sible moves in combination  of the dice. The number of  y grows at each level. To  incorporates two already  easoning and AI Planning.  in the following manner.  base to find the case with the  e of the board. This case is  he strategy consists of goal  for, and the plans consist of  he player to that goal. This  rategy are considered, those  ossible moves the number of  creases immensely.  e model considers the moves  gies of the AI player are  egies needs to be considered  opponent(s) depends of the  well as the strategy of the  s to be implemented for the  nce we cannot be aware of  eneral strategy would bring  d strategy of the AI player.   the agent comes back to  mputer player by using the  creating several loops of  size of a Game Tree taking  nd the rapidly decreasing  e due to the distribution of  ee stops. Then the minimax  and decides on the most  ing the minimax algorithm.  AI player is up.  Interactive and Adaptable Media 299 3rd International Conference on Digital Interactive Media in Entertainment and Arts Buying, auctioning and trading game moves are always  accompanied by return of investment calculations in making the  plans. These calculations represent adaptation of the more general  planning associated with the cases in the CBR database. These  adaptations are necessary due to the fact that the cases do not  identically correspond to the situation on the table. In addition  calculating the game position value of each node of the game tree  is done by heuristic functions that incorporate economic  calculations of net present value, cash, and strategic layout and so  on. For example railroads in monopoly are known to be  strategically effective because they bring constant income even  though the income can be smaller than building on other  properties.   6.2 Details on the CBR Implementation  The implementation of the CBR is by using the JColibri2  platform.  JColibri2 is an object-oriented framework in Java for  building CBR systems that is an evolution of previous work on  knowledge intensive CBR [14].   For this implementation we need to look into three particular  classes of the JColibri2 platform. The StandardCBRApplication,  Connector, CBRQuery. For a JColibri2 implementation the  StandardCBRApplication interface needs to be implemented.   The CBR cycle executed accepts an instance of CBRQuery.  This class represents a CBR query to the CBR database. The  description component (instance of CaseComponent) represents  the description of the case that will be looked up in the database.  All  cases  and  case  solutions  are  implementing  the  CaseComponent interface.  The JColibri2 platform connects to the CBR database via a  Connector class. Each connector implements all the necessary  methods for accessing the database, retrieval of cases, storing and  deletion of cases. This implementation uses a custom XML  structure for holding the CBR cases. Since the game will not  update the CBR database only read it, a XML solution satisfies  the needs. The XML file to a certain extent is similar to the XML  representation of the board. We are interested in finding one  CBRCase that is the most similar case to the situation in the game  at the time of the search. This procedure is done in the cycle  method of the CBRApplication. The JColibri2 CBR comparison is  done by Nearest Neighbor (NN) search method.   JColibri2 offers implementations for NN search algorithms  of simple attributes. These implementations are called local  similarities. For complex attributes like in our case global  customized similarity mechanisms need to be implemented.  The MonopolyDescription class [Figure 13] is basically a  serialization of the GameState. It holds all the information about  the state of the board, the players, their amount of cash etc.   Figure 13: Class diagram of the Monopoly Case component  models  On the other hand the MonopolySolution class holds the  three particular attributes that are needed for the planning, the  planning Domain, State and TaskList.  The game is implemented by using the Model-View- Controller software development pattern. The controller is  responsible for implementing the game rules and handling all of  the events in the game like roll of dice, input commands for  trading, auctioning and etc from the players. The View layer is  responsible for displaying the board and all of the input widgets  on to the game screen, and the models are data structures  representing the game state [Figure 14].  Figure 14: Class diagram of the Monopoly models  6.2.1 Complex Similarity representation in CBR  The similarity measurement part of the Nearest Neighbor  algorithm JColibri2 is implemented by implementing the  LocalSimiralrityFunction  and  the  GlobalSimiralityFunction  interface. A local similarity function is applied to simple attributes  by the NN algorithm, and a global similarity function is applied to  compound attributes. In the case of our implementation the  attributes of the MonopolyDescription are compound attributes  describing the state of the board, number of players, amount of  cash for every player and etc. Since MonopolyDescription is a  custom CaseComponent a global similarity function needs to be  implemented to accurately find the distance between different  CBR cases.  The similarity mechanism is inseparable core element of the  CBR system. This mechanism represents how the CBR decides  which strategy is best suited for the particular situation by  300 DIMEA 2008 3rd International Conference on Digital Interactive Media in Entertainment and Arts calculating the distance or similarity to other cases in the  database.   For the monopoly implementation we need to consider  several basic strategies. Monopoly is based on investing in  properties and receiving revenues from those investments. One of  the basic strategies of the game is to build a set of properties that  will bring constant income larger than the one of the opponents.  So in time the opponents will have to declare bankruptcy. But on  the other hand over investment can lead to too stretched resources  with low income that will eventually drove the player to  bankruptcy. To decide on these two we need a clear separation  into two groups of cases in the CBR database. The first group of  cases will represent a situation on the board where the player has  significant income per loop formed of one or more color group  properties, maybe railroads, some buildings on them and so on. It  is important to note that in this case the player is better situated  than his opponents so he only needs to survive long enough to win  the game. In the other group of cases either the opponent is not  well positioned on the board or its opponents are better situated.  In this case further investments are necessary to improve the  situation so the player can have a chance of winning in the long  run.   These metrics can be owning color groups, valuing groups of  railroads, evaluating the other opponents as well, and considering  the amount of cash. As it is obvious in monopoly the number of  streets is not as nearly as important as the combination of streets  the player owns. It is also important to note that one CBR case  does not hold only a single strategy in place, but its solution can  have multiple different strategic goals. For example one CBR case  might simultaneously say buy this land to form a color group but  also trade some other unimportant property to increase cash  amount.   The cases do not represent all possible combinations of board  positions. They are only representation of typical game scenarios.  The CBR Case solutions do not give exact instructions in general  but rather strategic goals. For example one CBR Solution might  say trade the streets that you only have one of each for the ones  that you have two of that color already. Then the planner based on  the situation on the board needs to decompose this high level task  to a low level operations. Like offer \"Mediterranean Avenue\" for  \"Reading Railroad\" and offer $50. The exact amounts and actual  streets are left to the planer to evaluate.   The monopoly CBR database is currently in development on  a monopoly clone game called Spaceopoly. The cases are  architected based on human player experience and knowledge.  There is a plan of making a number of slightly different strategies  that differ on the style of playing and then running simulation  tests that would determine the particular validity of each database  as well as validity of certain segments of the strategy or even  particular cases in the database.   The actual execution of the strategies will not differ from  strategy to strategy since the plan execution is more related to the  structure and rules of the game than to the actual playing strategy.  6.3 Details on the Planning Implementation  For the purpose of planning this implementation uses a  modification of the JSHOP2 planner. The Java Simple  Hierarchical Ordered Planner 2 is a domain independent HTN  planning system [15].   JSHOP2 uses ordered task decomposition in reducing the  HTN to list of primitive tasks which form the plans. An ordered  task decomposition planner is an HTN planner that plans for tasks  in the same order that they will be executed. This reduces the  complexity of reasoning by removing a great deal of uncertainty  about the world, which makes it easy to incorporate substantial  expressive power into the planning algorithm. In addition to the  usual HTN methods and operators, the planners can make use of  axioms, can do mixed symbolic/numeric conditions, and can do  external function calls.   In order for the JSHOP2 planer to generate plans it needs  tree crucial components: Domain, State and Tasks. The Domain  defines all the functionalities that the particular domain offers.  These are simple and complex tasks. The complex tasks also  called methods create the hierarchy with the fact that they can be  evaluated by simple tasks of other complex tasks. This is how a  hierarchical structure of tasks is formed. The problem reduction is  done by reducing the high level complex tasks to simpler until all  the tasks are primitive. The list of primitive tasks forms the plan.  The State represents the state of the system. It is a simple  database of facts that represent the state of the system. The State  is necessary to determine the way the problems or tasks are  reduced to their primitive level. The reduction is done by  satisfying different prerequisites set in the methods; these  prerequisites are defined in the state. The Tasks are high level  tasks or methods defined in the Domain. The planner based on the  State and the goals selects one or more high level tasks that need  to be reduced to plans [Figure  15].  Figure 15: Diagram of a Planner  The plans then generate the game moves. The number of  moves generated by the plans is just a fraction of the possible  moves at that point. This reduces the game tree providing the  opportunity to generate smaller and deeper game trees and making  more efficient decisions in general.   7. Conclusion  Even though the results from the CBR database are not  complete at this time partial strategies are implemented as cases  and recognized during game play by the CBR system. These  smaller local strategies coupled with more global higher level  strategies that are particularly important at the beginning of the  game would form a complete CBR database and represent a  knowledge engineered style of playing of the AI player.   The AI Planning approach is a proven method by the tic-tac- toe experiment and is suitable for implementing the strategies  associated with the CBR cases.  This approach in general benefits from both technologies,  CBR as well as AI Planning and comprises an elegant solution.  Even though AI Planning can be enough as a single technology  for some simpler problems like tic-tac-toe the complexity of  Monopoly would mean that the Planner would have to incorporate  Core Planner  Tasks Plan State Interactive and Adaptable Media 301 3rd International Conference on Digital Interactive Media in Entertainment and Arts large and complex domain and a very big state model. The CBR  application helps reduce this complexity by focusing the planning  on smaller domain of the game. Basically the CBR reduces the  overall goal of the play (wining the game) to smaller more  concrete goals suitable to the particular state of the game, thus  reducing the need for global planning strategies and complex  planning domain.   Furthermore this symbiosis of technologies gives way for  more precise and finely tuned strategies which can be difficult to  include into global plan for the whole game. One simple example  for the Monopoly game would be this: Sometimes it’s better to  stay in jail because rolling double increases the probability of  landing on some field (two, four, six, eight, ten or twelve steps  from the jail) that can be of great importance to the rest of the  game. These and similar small local strategies can be easily  recognized by similar cases in the CBR database.   In other words the system is flexible enough so that new  strategies can be incorporated easily missing strategies can be also  recognized by the distance metrics as well as wrong assumptions  in the strategies can be easily recognized.  One other important property of the system is that is highly  configurable. The game its self can be diversely different  depending on the configuration of the board. Even though the  platform is restricted to Monopoly type of games, changing the  layout and values of the fields effectively brings completely  different properties of the game. In addition the CBR database  represents the entire experience of the AI Player. It can be filled  with rich set of strategies or even configured with different flavors  of difficulties of play, this of course coupled with the domain of  the planner which can differ from a case to a case as well.   8. Future Work  Further exploration of this technology would go towards  complete implementation of an AI aware agent for monopoly.  Initial results from the local cases with more specific strategies  show CBR as a capable tool for representing expertise in playing  the game. Completing the more general strategies and coupling  them with the planning domain will give precise results on the  benefits from this architecture.  There is also need for exploring the planning of strategies of  opponents. This task is to some extent different because we  cannot always expect the opponent to select the best move we  think. In the Tic-tac-toe example all possible moves of the  opponent were taken into consideration, if we used the same  planner for the opponent only tie games would result from the  game tree. In other words mistakes of the players also need to be  considered.   The CBR Platform brings other functionalities well worth of  exploring as well. The revision stage of the JColibri2 platform is  basically capable of fine tuning strategies or even developing new  strategies for the games. A well written underlying AI planning  model with a capable feedback of the game tree evaluation back  to the CBR revision capability can be an interesting concept in  automatic experience acquisition for the AI model.  There are also many other fields were combined CBR and  planning approach can be incorporated into a problem solution.  This combination is analogous in a big extent to a human way of  reasoning. People in addition to logic of reasoning in situations  with lack of information rely to planning strategies and prior  experience, exactly the intuition behind CBR – AI Planning  architecture.   9. ACKNOWLEDGMENTS  We would like to thank Prof. Sofia Tsekeridou for her  involvement in the valuable discussions we had on the topic of  CBR.  10."],"url_pdf":["E:/courses/Nouveau/Article_01.pdf"],"auteurs":["Vlado Menkovski","Dimitrios Metafas"],"validated":[false],"titre":["AI Model for Computer games based on Case Based Reasoning and AI Planning"],"mots_cles":["Keywords Game AI","Case Based Reasoning","AI Planning","Game Trees  1."],"references_bibliographiques":["Minimax. Wikipedia. [Online] [Cited: April 23, 2008.]  http://en.wikipedia.org/wiki/Minimax.","Von Neumann, J: Zur theorie der gesellschaftsspiele Math.  Annalen. 100 (1928) 295-320","Automated Planning. Wikipedia. [Online] [Cited: April 23,  2008.] http://en.wikipedia.org/wiki/Automated_planning.","Sanchez-Ruiz, Antonio, et al. Game AI for a Turn-based  Strategy Game with Plan Adaptation and Ontology-based  retrieval.","K. Erol, J. Hendler, and D. Nau (1994). Semantics for  hierarchical task-network planning. Technical Report TR-94- 31, UMIACS.","Smith, S. J. J. and Dana S. Nau, T. A. Throp. A Planning  approach decrarer play in contract bridge. Computational  Intelligence. 1996, Vol. 12, 1.","One Jump Ahead: Challenging Human Supremacy in  Checkers. J.Schaeffer. s.l. : Springer-Verlag, 1997.","IBM. How Deep Blue works. [Online] 1997. [Cited: April  23, 2008.]  http://www.research.ibm.com/deepblue/meet/html/d.3.2.html","Ghallab, Malik, Nau, Dana and Traverso, Paolo.\nAutomated Planning theory and practice. s.l. : Morgan  Kaufmann Publishers, May 2004. ISBN 1-55860-856-7.","Case Based Reasoning. Experiences, Lessons and Future.  Leake, David. s.l. : AAAI Press. MIT Press., 1997.","Applying case-based reasoning: techniques for enterprise  systems. Watson, I. San Francisco, CA, USA : Morgan  Kaufmann Publishers Inc., 1998.","Plaza, A. Aamodt and E. Case-based reasoning:  Foundational issues, methodological. AI Communications.  1994, 7(i).","Tic-tac-toe. Wikipedia. [Online] [Cited: April 23, 2008.]  http://en.wikipedia.org/wiki/Tic-tac-toe.","Díaz-Agudo, B. and González-Calero, P. A. An  architecture for knowledge intensive CBR systems. Advances  in Case-Based Reasoning – (EWCBR’00). New York :  Springer-Verlag, Berlin Heidelberg, 2000.","Ilghami, Okhtay and Nau, Dana S. A General Approach to  Synthesize Problem-Specific Planners. 2003.  302 DIMEA 2008 3rd International Conference on Digital Interactive Media in Entertainment and Arts"]}},{"_index":"tp_igl11","_id":"qZp2bo0B5PBXeLSBFh9U","_version":1,"_score":1,"fields":{"institutions":["Mainak Adhikari Department","UP","Lucknow UP"],"resume":["ABSTRACT The emergence of novel types of communication, such as email, has been brought on by the development of the internet, which radically concentrated the way in that individuals communicate socially and with one another. It is now establishing itself as a crucial aspect of the communication network which has been adopted by a variety of commercial enterprises such as retail outlets. So in this research paper, we have built a unique spam-detection methodology based on email-body sentiment analysis. The proposed hybrid model is put into practice and preprocessing the data, extracting the proper- ties, and categorizing data are all steps in the process. To examine the emotive and sequential aspects of texts, we use word embed- ding and a bi-directional LSTM network. this model frequently shortens the training period, then utilizes the Convolution Layer to extract text features at a higher level for the BiLSTM network. Our model performs better than previous versions, with an accuracy rate of 97–98%. In addition, we show that our model beats not just some well-known machine learning classifiers but also cutting-edge methods for identifying spam communications, demonstrating its superiority on its own. Suggested Ensemble model’s results are examined in terms of recall, accuracy, and precision"],"texte_integral":["INTRODUCTION Over the past few years, a clear surge of both the amount of spam- mers as well as spam emails. This is likely due to a fact that the investment necessary for engaging in the spamming industry is relatively low. As a result of this, we currently have a system that identifies every email as suspicious, which has caused major expen- ditures in the investment of defense systems [12]. Emails are used for online crimes like fraud, hacking, phishing, E-mail bombing, bul- lying, and spamming. [16]. Algorithms that are based on machine learning (ML) are now the most effective and often used approach to the recognition of spam. Phishing, which is defined as a fraudulent attempt to acquire private information by masquerading as a trust- worthy party in electronic communication, has rapidly advanced past use of simple techniques and the tactic of casting a wide net; instead, spear phishing uses a variety of sophisticated techniques to target a single high-value individual. Other researchers used NB, Decision Trees, and SVM to compare the performance of supervised ML algorithms for spam identification [6]. Spam emails clog up re- cipients’ inboxes with unsolicited communications, which frustrate them and push them into the attacker’s planned traps [7]. As a re- sult, spam messages unquestionably pose a risk to both email users and the Internet community. In addition, Users may occasionally read the entire text of an unsolicited message that is delivered to the target users’ inboxes without realizing that the message is junk and then choosing to avoid it. Building a framework for email spam detection is the aim of this project. In this approach, we combine the Word-Embedding Network with the CNN layer, Bi-LSTM, and GRU (BiLSTM+GRU). CNN layers are used to speed up training time before the Bi-LSTM network, and more advanced textual character- istics are extracted with the use of this network in comparison to the straight LSTM network, in less time. Gated recurrent neural net- works (GRUs) are then added because they train more quickly and perform better for language modeling. To evaluate and investigate various machine learning algorithms for predicting email spam, and develop a hybrid classification algorithm to filter email spam before employing an ensemble classification algorithm to forecast it. To put an innovative technique into practice and compare it to the current method in terms of various metrics. Ensemble learn- ing, a successful machine learning paradigm, combines a group of learners rather than a single learner to forecast unknown target attributes. Bagging, boosting, voting, and stacking are the four main types of ensemble learning techniques. To increase performance, an integrated method and the combining of two or three algorithms are also suggested. Extraction of text-based features takes a long time. Furthermore, it can be challenging to extract all of the crucial information from a short text. Over the span associated with this 181 IC3 2023, August 03–05, 2023, Noida, India Sachan et al.\nresearch, we utilize Bidirectional Large Short-Term Memories (Bi- LSTM) in conjunction with Convolutional Neural Networks (CNN) to come up with an innovative method to the detection of spam.\nBagging and boosting approaches were widely preferred in this study. Contribution and paper organization is as follows: section 1.1 describes literature study, section 1.2 describe motivation for this research work, section 2 sketches procedure of details implemen- tation, Section 3 present experimental setup, dataset description and evaluation metrics, and section 4 summarizing outcomes of the experiment.\n1.1 Related Work Email is indeed the second most frequently utilized Internet appli- cation as well as the third most common method of cyberbullying, claims one study. Cybercriminals exploit it in a number of ways, including as sending obscene or abusive messages, adding viruses to emails, snatching the private information of victims, and ex- posing it to a broad audience. Spam letters made up 53.95% of all email traffic in March 2020. We examine three main types of un- lawful emails in our study. First are fake emails, which are sent to manipulate recipients to submit sensitive information. The sec- ond as being cyberbullying’s use of harassing emails to threaten individuals. Suspicious emails that describe illegal activities belong to the third category. Many researchers have earlier contributed massively to this subject. The researcher claims there is some proof that suspicious emails were sent before to the events of 9/11. [14].\nWhen it comes to data labeling, there are also convinced rule-based approaches and technologies ( like VADER) that are used, even though their efficiency of the are together is adversely affected. A hidden layer, which itself is essential for vectorization, is the top layer of the model. We use oversampling methods for this minority class because of the absence of data. Sampling techniques can help with multicollinearity, but they have an impact on simulation re- sults. Oversampling causes data to be randomly repeated, which affects test data because dividing data may result in duplicates. Un- dersampling may result in the loss of some strong information. In order to advance email research, it is crucial to provide datasets on criminal activity. P. Garg et al. (2021) [5], which revealed that spam in an email was detected in 70 percent of business emails, spam was established as an obstacle for email administrators. Recognizing spam and getting rid of it were the primary concerns, as spam can be offensive, may lead to other internet sites being tricked, which can offer harmful data, and can feature those who are not particu- lar with their content using NLP. To select the best-trained model, each mail transmission protocol requires precise and effective email classification, a machine learning comparison is done. Our study has suggested that innovative deep learning outperforms learning algorithms like SVM and RF. Current studies on the classification of emails use a variety of machine learning (ML) techniques, with a few of them focusing on the study of the sentiments consisted of within email databases. The lack of datasets is a significant obstacle to email classification. There are few publicly accessible E-mail datasets, thus researchers must use these datasets to test their hy- potheses or gather data on their own. Authors[15] describe supplied two-phased outlier detection models to enhance the IIOT network’s dependability. Artificial Neural Network, SVM, Gaussian NB, and RF (random forest) ensemble techniques were performed to forecast class labels, and the outputs were input into a classifying unit to increase accuracy. A method for content-based phishing detection was presented by the authors in [2], to classify phishing emails, they employed RF. They categorize spam and phishing emails. They enhanced phishing email classifiers with more accurate predictions by extracting features. They showed some effective Machine learn- ing spam filtering techniques. When the PCA method is used, it will lower the number of features in the dataset. The collected features go through the PCA algorithm to reduce the number of features.\nThe PCA method is used to make a straightforward representation of the information which illustrates the amount of variability there is in the data. The authors of [20] presented the Fuzzy C-means method for classifying spam email. To stop spam, they implemented a membership threshold value. A methodology to identify unla- beled data was put forth by the authors of [1] and applied motive analysis to the Enron data collection. They divided the data into categories that were favorable, negative, and neutral. They grouped the data using k-means clustering, an unsupervised ML technique and then classified it using the supervised ML techniques SVM and NB. Hina, Maryam, and colleagues (2021) implemented Sefaced: Deep learning-based semantic analysis and categorization of e-mail data using a forensic technique. For multiclass email classification, SeFACED employs a Gated Recurrent Neural Network (GRU) based on Long Short-Term Memory (LSTM). Different random weight ini- tializations affect LSTMs [9]. Zhang, Yan, et al.(2019) Experiments on three-way game-theoretic rough set (GTRS) email spam filter- ing show that it is feasible to significantly boost coverage without decreasing accuracy [23]. According to Xia et al. [22], SMS spam has been identified using machine learning model such as naive bayes , vector-space modeling, support vector machines (SVM), long selective memory machines (LSTM), and convolutional neural networks including every instance of a method for categorizing data. Elshoush, Huwaida, et al. (2019) Using adaboost and stochastic gradient descent (sgd) algorithms for e-mail filtering with R and orange software spam [3]. Orange software was used to create the classifications, which included Adaboost and SGD. The majority of researchers focused on text-based email spam classification meth- ods because image-based spam can be filtered in the early stages of pre-processing. There are widely used word bag (BoW) model, which believes that documents are merely unordered collections of words, is the foundation for these techniques. Kumaresan [11] explains SVM with a cuckoo search algorithm was used to extract textual features for spam detection. Renuka and Visalakshi made use of svm [17] spam email identification, followed by selecting features using Latent Semantic Indexing (LSI). Here we have used labeled dataset to train the hybrid classifier. We used TF-IDF for feature extraction [20] and Textual features for spam detection were extracted using SVM and a cuckoo search algorithm. [4] for filtering out the spam email. Combining the integrated strategy to the pure SVM and NB methods, overall accuracy is really improved.\nMoreover, accurate detection for spam email has been proposed using the Negative Selection Algorithm (NSA) and Particle Swarm Optimization’s (PSO) algorithm. PSO is used in this instance to improve the effectiveness of the classifier.\n182 Semantic Analysis and Classification of Emails through Informative Selection of Features and Ensemble AI Model IC3 2023, August 03–05, 2023, Noida, India 1.2 Motivation and Novelty Email is most common form of communication between people in this digital age. Many users have been victims of spam emails, and their personal information has been compromised. The email Classification technique is employed to identify and filter junk mail, junk, and virus-infected emails prior to reach a user’s inbox.\nExisting email classification methods result in irrelevant emails and/or the loss of valuable information. Keeping these constraints in mind, the following contributions are made in this paper: • Text-based feature extraction is a lengthy process. Further- more, extracting every important feature from text is difficult.\nIn this paper, we show how to employ GRU with Convo- lutional Neural Networks and Bidirectional-LSTM to find spam.\n• Used Word-Embeddings, BiLSTM, and Gated Recurrent Neu- ral Networks to examine the relationships, sentimental con- tent, and sequential way of email contents.\n• Applied CNN before the Bi-LSTM network, training time can be sped up. This network can also extract more advanced textual features faster than the Bi-LSTM network alone when combined with the GRU network.\n• We use Enorn Corpora datasets and compute precision, re- call, and f-score to assess how well the suggested technique performs. Our model outperforms several well-known ma- chine learning techniques as well as more contemporary methods for spam message detection.\n2 PROPOSED SYSTEM ARCHITECTURE AND MODEL E-mail is a valuable tool for communicating with other users. Email allows the sender to efficiently forward millions of advertisements at no cost. Unfortunately, this scheme is now being used in a variety of organizations. As a result, a massive amount of redundant emails is known as spam or junk mail, many people are confused about the emails in their E- Mailboxes. Each learning sequence is given for- ward as well as backward to two different LSTM networks that are attached to the same outputs layer in order for bidirectional Lstms to function. This indicates that the Bi-LSTM has detailed sequential information about all points before and following each point in a specific sequence. In other words, we concatenate the outputs from both the forward and the backward LSTM at each time step rather than just encoding the sequence in the forward direction. Each word’s encoded form now comprehends the words that come before and after it. This is a problem for the Internet community. The di- agram depicts various stages that aid in the prediction of email spam: Because real-world data is messy and contains unnecessary infor- mation and duplication, data preprocessing is critical in natural language processing (NLP). The major preprocessing steps are de- picted below.\n2.1 NLP Tokenization Tokenization of documents into words follows predefined rules.\nThe tokenization step is carried out in Python with spacy library.\n2.2 Stop Words Removal Stop words appear infrequently or frequently in the document, but they are less significant in terms of importance. As a result, these are removed to improve data processing.\n2.3 Text Normalization A word’s lexicon form or order may differ. Thus, they must all be changed to their root word to be correctly analyzed. Lemmatization and stemming are the two methods that can be used for normal- ization. When a word’s final few characters are removed to create a shorter form, even if that form has no meaning, the procedure is known as stemming. lemmatization [21] is a mixture of corpus- based an rule-based methods, and it retains the context of a term while changing it back to its root.\n2.4 Feature Extraction feature extraction which transforms the initial text into its features so that it may be used for modeling after being cleaned up and normalized. Before predicting them, we use a specific way to give weights to specific terms in our document. While it is simple for a computer to process numbers, we choose to represent individual words numerically. In such cases, we choose word embeddings. IDF is the count of documents containing the term divided by the total number of documents, and occurrence is the amount of instances a word appears in a document. We derive characteristics based on equations. 1,2,3,4,5, and 6. We use equations to derive properties.\n𝑇 𝑓 𝐼𝑑𝑓 = 𝑡𝑓 ∗ � 1 𝑑𝑓 � (1) 𝑇 𝑓 𝐼𝑑𝑓 = 𝑡𝑓 ∗ Inverse(𝑑𝑓 ) (2) 𝑇 𝑓 𝐼𝑑𝑓 (𝑡,𝑑, 𝐷) = 𝑇 𝑓 (𝑡,𝑑).𝐼𝑑𝑓 (𝑡, 𝐷) (3) 𝑇𝐼𝑑𝑓 (𝑡,𝑑) = log 𝑁 |𝑑𝜖𝐷𝑡𝜖𝐷| (4) A word2vec neural network-based approach is the method that is utilized for this goal as the tool. The following equation, referred to as 5, shows how word2vec handles word context through the use of probability-accurate measurements. Here letter D stands for the paired-wise display of a set of words, while the letters w and c0 or c1 represent paired word context that originated from a larger collection of set D.\n𝑃 (𝐷 = 1 | 𝑤,𝑐11:𝑘) = 1 1 + 𝑒−(𝑤·𝑐11+𝑤·𝑐12+...+𝑤·𝑐1𝑘) (5) 𝑃 (𝐷 = 1 | 𝑤,𝑐1:𝑘) = 1 1 + 𝑒−(𝑤·𝑐0) (6) 183 IC3 2023, August 03–05, 2023, Noida, India Sachan et al.\n2.5 Word-Embeddings Word-Embedding helps to improve on the typical \"bag-of-words\" worldview, which requires a massive sparse feature vector to score every word individually to represent this same entire vocabulary.\nThis perception is sparse because the vocabulary is large, and each word or document is defined by a massive vector. Using a word map-based dictionary, word embedding needs to be converted terms (words) into real value feature vectors. There are two basic issues with standard feature engineering techniques for deep learning.\nData is represented using sparse vectors, and the second is that some of the meanings of words are not taken into consideration.\nSimilar phrases will have values in embedding vectors that are almost real-valued. The Input length in our proposed study is set to 700 for our suggested model. If the texts seemed to be integer encoded with value systems between 10 and 20, the vocabulary distance would be 11. Our data is encoded as integers, and the input and output dimensions are both set to 50,000. The embedding layer outcome will be used in successive layers and for BiLSTM and GRU layers.\n2.6 Machine Learning Model Within the scope of the research, we are using the subsequent ma- chine learning techniques, to examine and compare the overall efficacy of our suggested Bi-LSTM strategy: Support Vector Ma- chine, Gaussian NB, Logistic Regression, K - nearest neighbors, and Random Forest (RF).\n2.7 Convolution Network The popular RNN model generally performs well but takes too long to train the model incorporating the textual sequential data.\nWhen a layer is added after the RNN layer, the model’s learning duration is considerably decreased. Higher-level feature extraction is another benefit. [19] additionally possible using the convolutional layer. In essence, the convolution layer looks for combinations of the various words or paragraphs in the document that involve the filters. We use features with 128 dimensions and a size 10 for each.\nFor this task, the Relu activation function is utilized. After that, the one-dimensional largest pooling layers with a pooling size of 4 are put on the data in order to obtain higher-level features.\n2.8 BiLSTM Network with GRU Recurrent Neural Network (RNN) technique of text sentiment anal- ysis is particularly well-liked and frequently applied. Recurrent neural networks (RNN) surpass conventional neural networks. be- cause it can remember the information from earlier time steps thanks to its memory. A state vector is combined with an RNN’s data to create a new state vector. The resulting state vector uses the present to recollect past knowledge. The RNN is straightforward and is based on the following equations: ℎ𝑡 = tanh (𝑊ℎℎℎ𝑡−1 +𝑊𝜋ℎ𝑥𝑡) (7) 𝑦𝑡 = 𝑊ℎ𝑦ℎ𝑡 (8) The vanilla RNN[18]is not very good at remembering previous sequences. In addition to that, RNN struggles with diminishing gradient descent. A kind of RNN is a long short-term recall network (LSTM), solves a vanishing gradient descent problem and learns long-term dependencies[10]. LSTM was actually created to address the problem of long-term reliance. LSTM has the unique ability to recall. The cell state is the LSTM model’s central concept. With only a small amount of linear interaction, the cell state follows the sequence essentially unmodified from beginning to end. gate of an LSTM is also significant. Under the command of these gates, information is safely inserted to or eliminated from the cell stated.\nThe following equations are used by the LSTM model to update each cell: 𝑓𝑡 = 𝜎 � 𝑊𝑓 · [ℎ𝑡−1,𝑥𝑡] + 𝑏𝑓 � (9) In this case, Xt denotes input, and ht is the hidden state at the t time step. The following is the revised cell state Ct: 𝑖t = 𝜎 (𝑊𝑖 [ℎ𝑡−1,𝑥𝑡] + 𝑏𝑖) (10) 𝐶𝑇 = tanh (𝑊𝑐 [ℎ𝑡−1,𝑥𝑡] + 𝑏𝑐𝑡) (11) 𝐶𝑡 = 𝑓𝑡 ∗ 𝐶𝑡−1 + 𝑖𝑡 ∗ 𝐶𝑇 (12) Here, we may compute the output and hidden state at t time steps using the point-wise multiplication operator *.\n𝑜𝑡 = 𝜎 (𝑊𝑜 · [ℎ𝑡−1,𝑥𝑡] + 𝑏𝑜) (13) ℎ𝑡 = 𝑜𝑡 ∗ tanh (𝐶𝑡) (14) Due to the reality it only considers all prior contexts from the present one, LSTM does have a few drawbacks. As a result of this, it may accept data from preceding time steps through LSTM as well as RNN. Therefore, in order to avoid this issue, further improve- ments are carried out with the help of a bidirectional recurrent neural network(Bi-RNN). BiRNN [13] can handle two pieces of in- formation from both the front and the back. Bi-LSTM is created by combining the Bi-RNN and LSTM. As a result, operating LSTM has advantages such as cell state storage so that BiRNN have way to acknowledge from the context before and after. As a conse- quence of this, it provides the Bi-LSTM with the advantages of an LSTM with feedback for the next layer. Remembering long-term dependencies is a significant new benefit of Bi-LSTM. The output, which is a feature vector, will be based on the call state. Finally, we forecast the probability of email content as Normal, Fraudu- lent, Harassment, and Suspicious Emails using as an input to the softmax activation function, which is a weighted sum of the dense layer’s outputs. To regulate the information flow, GRU employs the point-wise multiplying function and logistic sigmoid activation.\nThe GRU has hidden states of storage memory and does not have distinct memory cells or units for state control. The W, U, and b vectors, which stand for weights, gates, and biases, respectively, are crucial variables that must be calculated during the creation of the GRU model. For training reasons, the pre-trained word embedding known as the Glove vector is used. They made it clear that GRU is the superior model when there is a large amount of training data for textual groups and word embedding is available. BiLSTM, CNN, and GRU is required so as to compensate for the deletion of the document’s long-term and short-term connections. In our case, the embedding dimension, maximum sequence length, and lexicon size were used to start the LSTM embedding layer in three separate LSTM models. The input vector was modified to make it appropriate for such a Conv1D layer, prior situations’ sequences are returned by LSTM layer. The \"return sequences\" of the LSTM layer must be set to False when the subsequent state is free of the gated 184 Semantic Analysis and Classification of Emails through Informative Selection of Features and Ensemble AI Model IC3 2023, August 03–05, 2023, Noida, India architecture. Quantity of learning parameters must be taken into consideration. A 350-unit LSTM layer was set - up, and different LSTM unit combinations were tested. More importantly, because it has more parts, the model made with BiLSTM will take longer to train. Bidirectional LSTM is the name of a particular kind of recurrent neural network that is primarily used for the processing of natural languages. (BiLSTM). It is able to use data from both sides, and, in contrast to regular LSTM, it enables input flow in both directions. It is an effective instrument for demonstrating the logical relationships between words and phrases, and this involves both the forward and backward directions of the sequence. In con- clusion, BiLSTM works by adding one extra layer of LSTM, causing the information flow to travel in the other direction. It only denotes that the input sequence runs in reverse at the next LSTM layer. Mul- tiple operations, including averaging, summation, multiplication, and concatenation, are then applied to the results of the two LSTM layers. The gated design of Bi-LSTM and GRU networks solves the disappearing gradient and exploding problems. A good way to handle more long sequences is to use Bi-LSMT and GRU together.\nGRU works well with datasets that don’t have text. In two to three rounds, the complicated CNN+BiLSTM+GRU model learns the long sequence of email text well. We have used word embedding, cnn, bidirectional lstm and gru networks as our three building blocks to separate email messages based on their sentiment and text’s sequential features. Also, we succinctly demonstrate below why these blocks help identify email spam: • First, We have used the Sequence - to - sequence Lstm as the current block in the networks since it can retrieve both the previous and next sequences from the current. More so than a straightforward LSTM network, it can also recognize and extract text sentiment and sequential properties.\n• Second, we extract the more complex and advanced charac- teristics for Bi-LSTM network using Convolutional Network block, which is the network’s second block after the Bi-LSTM block. Bi-LSTM takes a long time to extract text-based fea- tures, hence one of the reasons for using this block is to reduce the network’s overall training time.\n3 EXPERIMENTAL EVALUATION 3.1 Experimental Setup We divided the information into training and testing groups of 80/20. We divided the remaining 20% of the 80 percent training data into test data for the model. Construct, compute, and evaluate the efficacy of the suggested method using the Pythonic packages Keras, as TensorFlow and Scikit learn.\n3.2 Dataset Description Email spam detection is the foundation of this research project. The dataset includes normal emails from the Enron corpora, deceptive emails from phished email corpora, harassment emails chosen from hate speech, and the offensive dataset. Only the content of the email body is used for analysis; all header information, including sender, topic, CC, and BCC, are eliminated. Word2vector, TF-IDF, and Word Embedding are used to extract characteristics from the email mes- sage and classify them. This dataset[8] is publicly available. The presented model is implemented using Python, and several metrics, including accuracy, precision, and recall, are used to examine the outcomes.\n3.3 Evaluation Metrics and Results Classifier performance is assessed Using metrics such as accuracy, precision, and recall. Four terms make up a confusion matrix that is used to calculate these metrics.\n• True positives (TP) are positive values that have been accu- rately assigned the positive label.\n• The negative values that are accurately identified as negative are known as True Negatives (TN).\n• True Negative values are those that can be accurately identi- fied as being negative (TN).\n• Positive readings that have been mistakenly labeled as nega- tive are known as False Negatives (FN).\nAssess the efficacy of the suggested model is listed below: 3.3.1 Accuracy. Accuracy reveals how frequently the ML model was overall correct.\nAccuracy = 𝑇𝑃 +𝑇𝑁 𝑇𝑃 +𝑇𝑁 + 𝐹𝑃 + 𝐹𝑁 (15) 3.3.2 Precision. The accuracy of the model gauges how effectively it can predict a specific category.\nPrecision = 𝑇𝑃 𝑇𝑃 + 𝐹𝑃 (16) 3.3.3 Recall. Recall tells us how often the model was able to rec- ognize a specific category.\nRecall = 𝑇𝑃 𝑇𝑃 + 𝐹𝑁 (17) Model Accuracy Precision Recall Gaussian NB 91.3 90.1 91.8 Random Forest 88.41 90 88 KNN 86.6 89 87 SVM 92.4 91 92 LSTM 95.2 95 95.7 Proposed Ensemble (CNN,BiLSTM+GRU) 97.32 95.6 95.3 Table 1: Differet Model’s Score on Test Data Accuracy, Precision, and Recall metrics are computed. In the given Table 1 where six different classifiers are Gaussian NB, Ran- dom Forest, KNN, SVM, LSTM, and Propose Ensemble Hybrid Model (CNN+BiLSTM+GRU) have been used in this work. In the CNN, Bi-LSTM, and GRU architectures which enable sequence pre- diction, CNN strands for feature extraction on data input which are combined with LSTM. It requires less time training and a higher expandable model. Any bottlenecks are created by predictions and the increasing number of distinct units of information. This model is useful for dealing with issue-related classifications that consist of two or more than two classes. So suggested Ensemble model, out of these six classifiers, produces more accurate findings.\n185 IC3 2023, August 03–05, 2023, Noida, India Sachan et al.\nFigure 1: Performance Analysis 3.4 Comparative Analysis A model’s ability to fit new data is measured by the validation loss, whereas its ability to fit training data is determined by the training loss. The two main variables that decide whether in which learning is efficient or not are validation loss and training loss.\nLSTM and Suggested Ensemble hybrid Models have equivalent loss and accuracy. In this context, we are contrasting the LSTM with the proposed model (CNN, Bilstm, and GRU) in terms of their respective validation accuracies and losses. The model’s accuracy was at its highest after 14 epochs of operation when it achieved an accuracy of roughly 97-98% while minimizing model loss.\nFigure 2: LSTM Model Training and Validation Accuracy Figure 3: LSTM Model Training and Validation Loss Figure 4: Ensemble Model (CNN,BiLSTM+GRU) Training and Validation Accuracy Figure 5: Ensemble Model (CNN,BiLSTM+GRU)Training and Validation Loss 186 Semantic Analysis and Classification of Emails through Informative Selection of Features and Ensemble AI Model IC3 2023, August 03–05, 2023, Noida, India In this Proposed ensemble hybrid model’s train accuracy is 98.7% Validation accuracy is 97.32% and LSTM has train accuracy of 97.41% and validation accuracy is 95.2%. So based on figures 3 and 5 indicate the validation loss for LSTM and the proposed ensemble hybrid model to be 0.93 and 0.84, respectively, and figures 2 and 4 show the validation accuracy to be 95.2% and 97.3%, respectively. LSTM and the proposed hybrid model used ensemble artificial intelligence, with the proposed hybrid model outperforming the LSTM. We decide on dense architecture as the final model for identifying the text messages as spam or nonspam based on loss, accuracy, and the aforementioned charts. The loss and accuracy over epochs are more stable than LSTM, and the Proposed classifier has a straightforward structure.\n4 CONCLUSION The model is composed of four networks Word-Embeddings, CNN, Bi-LSTM, and GRU. We may train the model more quickly by using the convolutional layer first, followed by the word-embedding layer, and then the BiLSTM network. The Bidirectional LSTM network also has higher-level properties that we can extract. We have used a bidirectional LSTM(BiLSTM)and GRU network to memorize a sentence’s contextual meaning and sequential structure, which im- proves the model’s performance accuracy to roughly 97.32 percent."],"url_pdf":["E:/courses/Nouveau/Article_02.pdf"],"auteurs":["Lucknow Lucknow","Khushbu Doulani"],"validated":[false],"titre":["Semantic Analysis and Classification of Emails through Informative Selection of Features and Ensemble AI Model"],"mots_cles":["KEYWORDS Dataset","KNN","Gaussian Naive Bayes","LSTM","SVM","Bidirectional LSTM","GRU","Word-Embeddings","CNN"],"references_bibliographiques":["Rayan Salah Hag Ali and Neamat El Gayar. 2019. Sentiment analysis using unla- beled email data. In 2019 International Conference on Computational Intelligence and Knowledge Economy (ICCIKE). IEEE, 328–333.","Ali Shafigh Aski and Navid Khalilzadeh Sourati. 2016. Proposed efficient algo- rithm to filter spam using machine learning techniques. Pacific Science Review A: Natural Science and Engineering 18, 2 (2016), 145–149.","Huwaida T Elshoush and Esraa A Dinar. 2019. Using adaboost and stochastic gradient descent (sgd) algorithms with R and orange software for filtering e-mail spam. In 2019 11th Computer Science and Electronic Engineering (CEEC). IEEE, 41–46.","Weimiao Feng, Jianguo Sun, Liguo Zhang, Cuiling Cao, and Qing Yang. 2016. A support vector machine based naive Bayes algorithm for spam filtering. In 2016 IEEE 35th International Performance Computing and Communications Conference (IPCCC). IEEE, 1–8.","Pranjul Garg and Nancy Girdhar. 2021. A Systematic Review on Spam Filtering Techniques based on Natural Language Processing Framework. In 2021 11th Inter- national Conference on Cloud Computing, Data Science & Engineering (Confluence).\nIEEE, 30–35.","Adam Kavon Ghazi-Tehrani and Henry N Pontell. 2021. Phishing evolves: Ana- lyzing the enduring cybercrime. Victims & Offenders 16, 3 (2021), 316–342.","Radicati Group et al. 2015. Email Statistics Report 2015–2019. Radicati Group.\nAccessed August 13 (2015), 2019.","Maryam Hina, Mohsin Ali, and Javed. 2021. Sefaced: Semantic-based forensic analysis and classification of e-mail data using deep learning. IEEE Access 9 (2021), 98398–98411.","Maryam Hina, Mohsin Ali, Abdul Rehman Javed, Fahad Ghabban, Liaqat Ali Khan, and Zunera Jalil. 2021. Sefaced: Semantic-based forensic analysis and classification of e-mail data using deep learning. IEEE Access 9 (2021), 98398– 98411.","Weicong Kong, Zhao Yang Dong, Youwei Jia, David J Hill, Yan Xu, and Yuan Zhang. 2017. Short-term residential load forecasting based on LSTM recurrent neural network. IEEE transactions on smart grid 10, 1 (2017), 841–851.","T Kumaresan and C Palanisamy. 2017. E-mail spam classification using S-cuckoo search and support vector machine. International Journal of Bio-Inspired Compu- tation 9, 3 (2017), 142–156.","Nuha H Marza, Mehdi E Manaa, and Hussein A Lafta. 2021. Classification of spam emails using deep learning. In 2021 1st Babylon International Conference on Information Technology and Science (BICITS). IEEE, 63–68.","Tomas Mikolov and Geoffrey Zweig. 2012. Context dependent recurrent neural network language model. In 2012 IEEE Spoken Language Technology Workshop (SLT). IEEE, 234–239.","Sarwat Nizamani, Nasrullah Memon, Mathies Glasdam, and Dong Duong Nguyen.\n2014. Detection of fraudulent emails by employing advanced feature abundance.\nEgyptian Informatics Journal 15, 3 (2014), 169–174.","V Priya, I Sumaiya Thaseen, Thippa Reddy Gadekallu, Mohamed K Aboudaif, and Emad Abouel Nasr. 2021. Robust attack detection approach for IIoT using ensemble classifier. arXiv preprint arXiv:2102.01515 (2021).","Justinas Rastenis, Simona Ramanauskait˙e, Justinas Janulevičius, Antanas Čenys, Asta Slotkien˙e, and Kęstutis Pakrijauskas. 2020. E-mail-based phishing attack taxonomy. Applied Sciences 10, 7 (2020), 2363.","Karthika D Renuka and P Visalakshi. 2014. Latent semantic indexing based SVM model for email spam classification. (2014).","Shuvendu Roy, Sk Imran Hossain, MAH Akhand, and N Siddique. 2018. Sequence modeling for intelligent typing assistant with Bangla and English keyboard. In 2018 International Conference on Innovation in Engineering and Technology (ICIET).\nIEEE, 1–6.","Tara N Sainath, Oriol Vinyals, Andrew Senior, and Haşim Sak. 2015. Convolu- tional, long short-term memory, fully connected deep neural networks. In 2015 IEEE international conference on acoustics, speech and signal processing (ICASSP).\nIeee, 4580–4584.","Anuj Kumar Singh, Shashi Bhushan, and Sonakshi Vij. 2019. Filtering spam messages and mails using fuzzy C means algorithm. In 2019 4th International Conference on Internet of Things: Smart Innovation and Usages (IoT-SIU). IEEE, 1–5.","Kristina Toutanova and Colin Cherry. 2009. A global model for joint lemmati- zation and part-of-speech prediction. In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP. 486–494.","Tian Xia. 2020. A constant time complexity spam detection algorithm for boosting throughput on rule-based filtering systems. IEEE Access 8 (2020), 82653–82661.","Yan Zhang, PengFei Liu, and JingTao Yao. 2019. Three-way email spam filtering with game-theoretic rough sets. In 2019 International conference on computing, networking and communications (ICNC). IEEE, 552–556.\nReceived 15 April 2023 187"]}}]
